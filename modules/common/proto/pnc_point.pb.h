// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/common/proto/pnc_point.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto;
namespace apollo {
namespace common {
class PathPoint;
class PathPointDefaultTypeInternal;
extern PathPointDefaultTypeInternal _PathPoint_default_instance_;
class TrajectoryPoint;
class TrajectoryPointDefaultTypeInternal;
extern TrajectoryPointDefaultTypeInternal _TrajectoryPoint_default_instance_;
}  // namespace common
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::common::PathPoint* Arena::CreateMaybeMessage<::apollo::common::PathPoint>(Arena*);
template<> ::apollo::common::TrajectoryPoint* Arena::CreateMaybeMessage<::apollo::common::TrajectoryPoint>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace common {

// ===================================================================

class PathPoint :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.common.PathPoint) */ {
 public:
  PathPoint();
  virtual ~PathPoint();

  PathPoint(const PathPoint& from);
  PathPoint(PathPoint&& from) noexcept
    : PathPoint() {
    *this = ::std::move(from);
  }

  inline PathPoint& operator=(const PathPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline PathPoint& operator=(PathPoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PathPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PathPoint* internal_default_instance() {
    return reinterpret_cast<const PathPoint*>(
               &_PathPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PathPoint& a, PathPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(PathPoint* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PathPoint* New() const final {
    return CreateMaybeMessage<PathPoint>(nullptr);
  }

  PathPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PathPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PathPoint& from);
  void MergeFrom(const PathPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PathPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.common.PathPoint";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto);
    return ::descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLaneIdFieldNumber = 9,
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kThetaFieldNumber = 4,
    kKappaFieldNumber = 5,
    kSFieldNumber = 6,
    kDkappaFieldNumber = 7,
    kDdkappaFieldNumber = 8,
    kXDerivativeFieldNumber = 10,
    kYDerivativeFieldNumber = 11,
  };
  // optional string lane_id = 9;
  bool has_lane_id() const;
  void clear_lane_id();
  const std::string& lane_id() const;
  void set_lane_id(const std::string& value);
  void set_lane_id(std::string&& value);
  void set_lane_id(const char* value);
  void set_lane_id(const char* value, size_t size);
  std::string* mutable_lane_id();
  std::string* release_lane_id();
  void set_allocated_lane_id(std::string* lane_id);

  // optional double x = 1;
  bool has_x() const;
  void clear_x();
  double x() const;
  void set_x(double value);

  // optional double y = 2;
  bool has_y() const;
  void clear_y();
  double y() const;
  void set_y(double value);

  // optional double z = 3;
  bool has_z() const;
  void clear_z();
  double z() const;
  void set_z(double value);

  // optional double theta = 4;
  bool has_theta() const;
  void clear_theta();
  double theta() const;
  void set_theta(double value);

  // optional double kappa = 5;
  bool has_kappa() const;
  void clear_kappa();
  double kappa() const;
  void set_kappa(double value);

  // optional double s = 6;
  bool has_s() const;
  void clear_s();
  double s() const;
  void set_s(double value);

  // optional double dkappa = 7;
  bool has_dkappa() const;
  void clear_dkappa();
  double dkappa() const;
  void set_dkappa(double value);

  // optional double ddkappa = 8;
  bool has_ddkappa() const;
  void clear_ddkappa();
  double ddkappa() const;
  void set_ddkappa(double value);

  // optional double x_derivative = 10;
  bool has_x_derivative() const;
  void clear_x_derivative();
  double x_derivative() const;
  void set_x_derivative(double value);

  // optional double y_derivative = 11;
  bool has_y_derivative() const;
  void clear_y_derivative();
  double y_derivative() const;
  void set_y_derivative(double value);

  // @@protoc_insertion_point(class_scope:apollo.common.PathPoint)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lane_id_;
  double x_;
  double y_;
  double z_;
  double theta_;
  double kappa_;
  double s_;
  double dkappa_;
  double ddkappa_;
  double x_derivative_;
  double y_derivative_;
  friend struct ::TableStruct_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto;
};
// -------------------------------------------------------------------

class TrajectoryPoint :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.common.TrajectoryPoint) */ {
 public:
  TrajectoryPoint();
  virtual ~TrajectoryPoint();

  TrajectoryPoint(const TrajectoryPoint& from);
  TrajectoryPoint(TrajectoryPoint&& from) noexcept
    : TrajectoryPoint() {
    *this = ::std::move(from);
  }

  inline TrajectoryPoint& operator=(const TrajectoryPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrajectoryPoint& operator=(TrajectoryPoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrajectoryPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrajectoryPoint* internal_default_instance() {
    return reinterpret_cast<const TrajectoryPoint*>(
               &_TrajectoryPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TrajectoryPoint& a, TrajectoryPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(TrajectoryPoint* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrajectoryPoint* New() const final {
    return CreateMaybeMessage<TrajectoryPoint>(nullptr);
  }

  TrajectoryPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrajectoryPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrajectoryPoint& from);
  void MergeFrom(const TrajectoryPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrajectoryPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.common.TrajectoryPoint";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto);
    return ::descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathPointFieldNumber = 1,
    kVFieldNumber = 2,
    kAFieldNumber = 3,
    kRelativeTimeFieldNumber = 4,
    kDaFieldNumber = 5,
    kSteerFieldNumber = 6,
  };
  // optional .apollo.common.PathPoint path_point = 1;
  bool has_path_point() const;
  void clear_path_point();
  const ::apollo::common::PathPoint& path_point() const;
  ::apollo::common::PathPoint* release_path_point();
  ::apollo::common::PathPoint* mutable_path_point();
  void set_allocated_path_point(::apollo::common::PathPoint* path_point);

  // optional double v = 2;
  bool has_v() const;
  void clear_v();
  double v() const;
  void set_v(double value);

  // optional double a = 3;
  bool has_a() const;
  void clear_a();
  double a() const;
  void set_a(double value);

  // optional double relative_time = 4;
  bool has_relative_time() const;
  void clear_relative_time();
  double relative_time() const;
  void set_relative_time(double value);

  // optional double da = 5;
  bool has_da() const;
  void clear_da();
  double da() const;
  void set_da(double value);

  // optional double steer = 6;
  bool has_steer() const;
  void clear_steer();
  double steer() const;
  void set_steer(double value);

  // @@protoc_insertion_point(class_scope:apollo.common.TrajectoryPoint)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::apollo::common::PathPoint* path_point_;
  double v_;
  double a_;
  double relative_time_;
  double da_;
  double steer_;
  friend struct ::TableStruct_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PathPoint

// optional double x = 1;
inline bool PathPoint::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PathPoint::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double PathPoint::x() const {
  // @@protoc_insertion_point(field_get:apollo.common.PathPoint.x)
  return x_;
}
inline void PathPoint::set_x(double value) {
  _has_bits_[0] |= 0x00000002u;
  x_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.PathPoint.x)
}

// optional double y = 2;
inline bool PathPoint::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PathPoint::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double PathPoint::y() const {
  // @@protoc_insertion_point(field_get:apollo.common.PathPoint.y)
  return y_;
}
inline void PathPoint::set_y(double value) {
  _has_bits_[0] |= 0x00000004u;
  y_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.PathPoint.y)
}

// optional double z = 3;
inline bool PathPoint::has_z() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PathPoint::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double PathPoint::z() const {
  // @@protoc_insertion_point(field_get:apollo.common.PathPoint.z)
  return z_;
}
inline void PathPoint::set_z(double value) {
  _has_bits_[0] |= 0x00000008u;
  z_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.PathPoint.z)
}

// optional double theta = 4;
inline bool PathPoint::has_theta() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PathPoint::clear_theta() {
  theta_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double PathPoint::theta() const {
  // @@protoc_insertion_point(field_get:apollo.common.PathPoint.theta)
  return theta_;
}
inline void PathPoint::set_theta(double value) {
  _has_bits_[0] |= 0x00000010u;
  theta_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.PathPoint.theta)
}

// optional double kappa = 5;
inline bool PathPoint::has_kappa() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PathPoint::clear_kappa() {
  kappa_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double PathPoint::kappa() const {
  // @@protoc_insertion_point(field_get:apollo.common.PathPoint.kappa)
  return kappa_;
}
inline void PathPoint::set_kappa(double value) {
  _has_bits_[0] |= 0x00000020u;
  kappa_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.PathPoint.kappa)
}

// optional double s = 6;
inline bool PathPoint::has_s() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PathPoint::clear_s() {
  s_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double PathPoint::s() const {
  // @@protoc_insertion_point(field_get:apollo.common.PathPoint.s)
  return s_;
}
inline void PathPoint::set_s(double value) {
  _has_bits_[0] |= 0x00000040u;
  s_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.PathPoint.s)
}

// optional double dkappa = 7;
inline bool PathPoint::has_dkappa() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PathPoint::clear_dkappa() {
  dkappa_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double PathPoint::dkappa() const {
  // @@protoc_insertion_point(field_get:apollo.common.PathPoint.dkappa)
  return dkappa_;
}
inline void PathPoint::set_dkappa(double value) {
  _has_bits_[0] |= 0x00000080u;
  dkappa_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.PathPoint.dkappa)
}

// optional double ddkappa = 8;
inline bool PathPoint::has_ddkappa() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PathPoint::clear_ddkappa() {
  ddkappa_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double PathPoint::ddkappa() const {
  // @@protoc_insertion_point(field_get:apollo.common.PathPoint.ddkappa)
  return ddkappa_;
}
inline void PathPoint::set_ddkappa(double value) {
  _has_bits_[0] |= 0x00000100u;
  ddkappa_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.PathPoint.ddkappa)
}

// optional string lane_id = 9;
inline bool PathPoint::has_lane_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PathPoint::clear_lane_id() {
  lane_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PathPoint::lane_id() const {
  // @@protoc_insertion_point(field_get:apollo.common.PathPoint.lane_id)
  return lane_id_.GetNoArena();
}
inline void PathPoint::set_lane_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  lane_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.common.PathPoint.lane_id)
}
inline void PathPoint::set_lane_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  lane_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.common.PathPoint.lane_id)
}
inline void PathPoint::set_lane_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  lane_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.common.PathPoint.lane_id)
}
inline void PathPoint::set_lane_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  lane_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.common.PathPoint.lane_id)
}
inline std::string* PathPoint::mutable_lane_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:apollo.common.PathPoint.lane_id)
  return lane_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PathPoint::release_lane_id() {
  // @@protoc_insertion_point(field_release:apollo.common.PathPoint.lane_id)
  if (!has_lane_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return lane_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PathPoint::set_allocated_lane_id(std::string* lane_id) {
  if (lane_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  lane_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lane_id);
  // @@protoc_insertion_point(field_set_allocated:apollo.common.PathPoint.lane_id)
}

// optional double x_derivative = 10;
inline bool PathPoint::has_x_derivative() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PathPoint::clear_x_derivative() {
  x_derivative_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline double PathPoint::x_derivative() const {
  // @@protoc_insertion_point(field_get:apollo.common.PathPoint.x_derivative)
  return x_derivative_;
}
inline void PathPoint::set_x_derivative(double value) {
  _has_bits_[0] |= 0x00000200u;
  x_derivative_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.PathPoint.x_derivative)
}

// optional double y_derivative = 11;
inline bool PathPoint::has_y_derivative() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PathPoint::clear_y_derivative() {
  y_derivative_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline double PathPoint::y_derivative() const {
  // @@protoc_insertion_point(field_get:apollo.common.PathPoint.y_derivative)
  return y_derivative_;
}
inline void PathPoint::set_y_derivative(double value) {
  _has_bits_[0] |= 0x00000400u;
  y_derivative_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.PathPoint.y_derivative)
}

// -------------------------------------------------------------------

// TrajectoryPoint

// optional .apollo.common.PathPoint path_point = 1;
inline bool TrajectoryPoint::has_path_point() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrajectoryPoint::clear_path_point() {
  if (path_point_ != nullptr) path_point_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::common::PathPoint& TrajectoryPoint::path_point() const {
  const ::apollo::common::PathPoint* p = path_point_;
  // @@protoc_insertion_point(field_get:apollo.common.TrajectoryPoint.path_point)
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::common::PathPoint*>(
      &::apollo::common::_PathPoint_default_instance_);
}
inline ::apollo::common::PathPoint* TrajectoryPoint::release_path_point() {
  // @@protoc_insertion_point(field_release:apollo.common.TrajectoryPoint.path_point)
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::common::PathPoint* temp = path_point_;
  path_point_ = nullptr;
  return temp;
}
inline ::apollo::common::PathPoint* TrajectoryPoint::mutable_path_point() {
  _has_bits_[0] |= 0x00000001u;
  if (path_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::PathPoint>(GetArenaNoVirtual());
    path_point_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.common.TrajectoryPoint.path_point)
  return path_point_;
}
inline void TrajectoryPoint::set_allocated_path_point(::apollo::common::PathPoint* path_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete path_point_;
  }
  if (path_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      path_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, path_point, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_point_ = path_point;
  // @@protoc_insertion_point(field_set_allocated:apollo.common.TrajectoryPoint.path_point)
}

// optional double v = 2;
inline bool TrajectoryPoint::has_v() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrajectoryPoint::clear_v() {
  v_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double TrajectoryPoint::v() const {
  // @@protoc_insertion_point(field_get:apollo.common.TrajectoryPoint.v)
  return v_;
}
inline void TrajectoryPoint::set_v(double value) {
  _has_bits_[0] |= 0x00000002u;
  v_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.TrajectoryPoint.v)
}

// optional double a = 3;
inline bool TrajectoryPoint::has_a() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrajectoryPoint::clear_a() {
  a_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double TrajectoryPoint::a() const {
  // @@protoc_insertion_point(field_get:apollo.common.TrajectoryPoint.a)
  return a_;
}
inline void TrajectoryPoint::set_a(double value) {
  _has_bits_[0] |= 0x00000004u;
  a_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.TrajectoryPoint.a)
}

// optional double relative_time = 4;
inline bool TrajectoryPoint::has_relative_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TrajectoryPoint::clear_relative_time() {
  relative_time_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double TrajectoryPoint::relative_time() const {
  // @@protoc_insertion_point(field_get:apollo.common.TrajectoryPoint.relative_time)
  return relative_time_;
}
inline void TrajectoryPoint::set_relative_time(double value) {
  _has_bits_[0] |= 0x00000008u;
  relative_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.TrajectoryPoint.relative_time)
}

// optional double da = 5;
inline bool TrajectoryPoint::has_da() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TrajectoryPoint::clear_da() {
  da_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double TrajectoryPoint::da() const {
  // @@protoc_insertion_point(field_get:apollo.common.TrajectoryPoint.da)
  return da_;
}
inline void TrajectoryPoint::set_da(double value) {
  _has_bits_[0] |= 0x00000010u;
  da_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.TrajectoryPoint.da)
}

// optional double steer = 6;
inline bool TrajectoryPoint::has_steer() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TrajectoryPoint::clear_steer() {
  steer_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double TrajectoryPoint::steer() const {
  // @@protoc_insertion_point(field_get:apollo.common.TrajectoryPoint.steer)
  return steer_;
}
inline void TrajectoryPoint::set_steer(double value) {
  _has_bits_[0] |= 0x00000020u;
  steer_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.TrajectoryPoint.steer)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto
