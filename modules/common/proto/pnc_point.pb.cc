// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/common/proto/pnc_point.proto

#include "modules/common/proto/pnc_point.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PathPoint_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto;
namespace apollo {
namespace common {
class PathPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PathPoint> _instance;
} _PathPoint_default_instance_;
class TrajectoryPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrajectoryPoint> _instance;
} _TrajectoryPoint_default_instance_;
}  // namespace common
}  // namespace apollo
static void InitDefaultsscc_info_PathPoint_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::common::_PathPoint_default_instance_;
    new (ptr) ::apollo::common::PathPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::common::PathPoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PathPoint_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PathPoint_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto}, {}};

static void InitDefaultsscc_info_TrajectoryPoint_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::common::_TrajectoryPoint_default_instance_;
    new (ptr) ::apollo::common::TrajectoryPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::common::TrajectoryPoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrajectoryPoint_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TrajectoryPoint_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto}, {
      &scc_info_PathPoint_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::common::PathPoint, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::PathPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::common::PathPoint, x_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::PathPoint, y_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::PathPoint, z_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::PathPoint, theta_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::PathPoint, kappa_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::PathPoint, s_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::PathPoint, dkappa_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::PathPoint, ddkappa_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::PathPoint, lane_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::PathPoint, x_derivative_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::PathPoint, y_derivative_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  0,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::apollo::common::TrajectoryPoint, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::TrajectoryPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::common::TrajectoryPoint, path_point_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::TrajectoryPoint, v_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::TrajectoryPoint, a_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::TrajectoryPoint, relative_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::TrajectoryPoint, da_),
  PROTOBUF_FIELD_OFFSET(::apollo::common::TrajectoryPoint, steer_),
  0,
  1,
  2,
  3,
  4,
  5,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 16, sizeof(::apollo::common::PathPoint)},
  { 27, 38, sizeof(::apollo::common::TrajectoryPoint)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::common::_PathPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::common::_TrajectoryPoint_default_instance_),
};

const char descriptor_table_protodef_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n$modules/common/proto/pnc_point.proto\022\r"
  "apollo.common\"\263\001\n\tPathPoint\022\t\n\001x\030\001 \001(\001\022\t"
  "\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\022\r\n\005theta\030\004 \001(\001\022\r\n\005k"
  "appa\030\005 \001(\001\022\t\n\001s\030\006 \001(\001\022\016\n\006dkappa\030\007 \001(\001\022\017\n"
  "\007ddkappa\030\010 \001(\001\022\017\n\007lane_id\030\t \001(\t\022\024\n\014x_der"
  "ivative\030\n \001(\001\022\024\n\014y_derivative\030\013 \001(\001\"\207\001\n\017"
  "TrajectoryPoint\022,\n\npath_point\030\001 \001(\0132\030.ap"
  "ollo.common.PathPoint\022\t\n\001v\030\002 \001(\001\022\t\n\001a\030\003 "
  "\001(\001\022\025\n\rrelative_time\030\004 \001(\001\022\n\n\002da\030\005 \001(\001\022\r"
  "\n\005steer\030\006 \001(\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto_sccs[2] = {
  &scc_info_PathPoint_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto.base,
  &scc_info_TrajectoryPoint_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto_once;
static bool descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto = {
  &descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto_initialized, descriptor_table_protodef_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto, "modules/common/proto/pnc_point.proto", 373,
  &descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto_once, descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto_sccs, descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto::offsets,
  file_level_metadata_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto, 2, file_level_enum_descriptors_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto, file_level_service_descriptors_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto), true);
namespace apollo {
namespace common {

// ===================================================================

void PathPoint::InitAsDefaultInstance() {
}
class PathPoint::_Internal {
 public:
  using HasBits = decltype(std::declval<PathPoint>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_theta(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_kappa(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_s(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_dkappa(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_ddkappa(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_lane_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_x_derivative(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_y_derivative(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

PathPoint::PathPoint()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.common.PathPoint)
}
PathPoint::PathPoint(const PathPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  lane_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_lane_id()) {
    lane_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.lane_id_);
  }
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_derivative_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_derivative_));
  // @@protoc_insertion_point(copy_constructor:apollo.common.PathPoint)
}

void PathPoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PathPoint_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto.base);
  lane_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_derivative_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_derivative_));
}

PathPoint::~PathPoint() {
  // @@protoc_insertion_point(destructor:apollo.common.PathPoint)
  SharedDtor();
}

void PathPoint::SharedDtor() {
  lane_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PathPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PathPoint& PathPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PathPoint_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto.base);
  return *internal_default_instance();
}


void PathPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.PathPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    lane_id_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dkappa_) -
        reinterpret_cast<char*>(&x_)) + sizeof(dkappa_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&ddkappa_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_derivative_) -
        reinterpret_cast<char*>(&ddkappa_)) + sizeof(y_derivative_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PathPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_z(&has_bits);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double theta = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_theta(&has_bits);
          theta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double kappa = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_kappa(&has_bits);
          kappa_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double s = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_s(&has_bits);
          s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double dkappa = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_dkappa(&has_bits);
          dkappa_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double ddkappa = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_ddkappa(&has_bits);
          ddkappa_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional string lane_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_lane_id(), ptr, ctx, "apollo.common.PathPoint.lane_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double x_derivative = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_x_derivative(&has_bits);
          x_derivative_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double y_derivative = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_y_derivative(&has_bits);
          y_derivative_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PathPoint::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.common.PathPoint)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {
          _Internal::set_has_x(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double y = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {
          _Internal::set_has_y(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double z = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {
          _Internal::set_has_z(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double theta = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {
          _Internal::set_has_theta(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &theta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double kappa = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (41 & 0xFF)) {
          _Internal::set_has_kappa(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &kappa_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double s = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (49 & 0xFF)) {
          _Internal::set_has_s(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double dkappa = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (57 & 0xFF)) {
          _Internal::set_has_dkappa(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dkappa_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ddkappa = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (65 & 0xFF)) {
          _Internal::set_has_ddkappa(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ddkappa_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string lane_id = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_lane_id()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lane_id().data(), static_cast<int>(this->lane_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "apollo.common.PathPoint.lane_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double x_derivative = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (81 & 0xFF)) {
          _Internal::set_has_x_derivative(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_derivative_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double y_derivative = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (89 & 0xFF)) {
          _Internal::set_has_y_derivative(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_derivative_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.common.PathPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.common.PathPoint)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PathPoint::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.common.PathPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // optional double z = 3;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  // optional double theta = 4;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->theta(), output);
  }

  // optional double kappa = 5;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(5, this->kappa(), output);
  }

  // optional double s = 6;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(6, this->s(), output);
  }

  // optional double dkappa = 7;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(7, this->dkappa(), output);
  }

  // optional double ddkappa = 8;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(8, this->ddkappa(), output);
  }

  // optional string lane_id = 9;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lane_id().data(), static_cast<int>(this->lane_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.common.PathPoint.lane_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->lane_id(), output);
  }

  // optional double x_derivative = 10;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(10, this->x_derivative(), output);
  }

  // optional double y_derivative = 11;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(11, this->y_derivative(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.common.PathPoint)
}

::PROTOBUF_NAMESPACE_ID::uint8* PathPoint::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.PathPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // optional double z = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  // optional double theta = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->theta(), target);
  }

  // optional double kappa = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->kappa(), target);
  }

  // optional double s = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->s(), target);
  }

  // optional double dkappa = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->dkappa(), target);
  }

  // optional double ddkappa = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->ddkappa(), target);
  }

  // optional string lane_id = 9;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lane_id().data(), static_cast<int>(this->lane_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.common.PathPoint.lane_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        9, this->lane_id(), target);
  }

  // optional double x_derivative = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->x_derivative(), target);
  }

  // optional double y_derivative = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->y_derivative(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.PathPoint)
  return target;
}

size_t PathPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.PathPoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string lane_id = 9;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->lane_id());
    }

    // optional double x = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double y = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double z = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double theta = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double kappa = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double s = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double dkappa = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional double ddkappa = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double x_derivative = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double y_derivative = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PathPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.common.PathPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const PathPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PathPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.common.PathPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.common.PathPoint)
    MergeFrom(*source);
  }
}

void PathPoint::MergeFrom(const PathPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.PathPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      lane_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.lane_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000008u) {
      z_ = from.z_;
    }
    if (cached_has_bits & 0x00000010u) {
      theta_ = from.theta_;
    }
    if (cached_has_bits & 0x00000020u) {
      kappa_ = from.kappa_;
    }
    if (cached_has_bits & 0x00000040u) {
      s_ = from.s_;
    }
    if (cached_has_bits & 0x00000080u) {
      dkappa_ = from.dkappa_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      ddkappa_ = from.ddkappa_;
    }
    if (cached_has_bits & 0x00000200u) {
      x_derivative_ = from.x_derivative_;
    }
    if (cached_has_bits & 0x00000400u) {
      y_derivative_ = from.y_derivative_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PathPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.common.PathPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathPoint::CopyFrom(const PathPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.PathPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathPoint::IsInitialized() const {
  return true;
}

void PathPoint::InternalSwap(PathPoint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  lane_id_.Swap(&other->lane_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(theta_, other->theta_);
  swap(kappa_, other->kappa_);
  swap(s_, other->s_);
  swap(dkappa_, other->dkappa_);
  swap(ddkappa_, other->ddkappa_);
  swap(x_derivative_, other->x_derivative_);
  swap(y_derivative_, other->y_derivative_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PathPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrajectoryPoint::InitAsDefaultInstance() {
  ::apollo::common::_TrajectoryPoint_default_instance_._instance.get_mutable()->path_point_ = const_cast< ::apollo::common::PathPoint*>(
      ::apollo::common::PathPoint::internal_default_instance());
}
class TrajectoryPoint::_Internal {
 public:
  using HasBits = decltype(std::declval<TrajectoryPoint>()._has_bits_);
  static const ::apollo::common::PathPoint& path_point(const TrajectoryPoint* msg);
  static void set_has_path_point(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_v(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_relative_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_da(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_steer(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::apollo::common::PathPoint&
TrajectoryPoint::_Internal::path_point(const TrajectoryPoint* msg) {
  return *msg->path_point_;
}
TrajectoryPoint::TrajectoryPoint()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.common.TrajectoryPoint)
}
TrajectoryPoint::TrajectoryPoint(const TrajectoryPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_path_point()) {
    path_point_ = new ::apollo::common::PathPoint(*from.path_point_);
  } else {
    path_point_ = nullptr;
  }
  ::memcpy(&v_, &from.v_,
    static_cast<size_t>(reinterpret_cast<char*>(&steer_) -
    reinterpret_cast<char*>(&v_)) + sizeof(steer_));
  // @@protoc_insertion_point(copy_constructor:apollo.common.TrajectoryPoint)
}

void TrajectoryPoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrajectoryPoint_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto.base);
  ::memset(&path_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&steer_) -
      reinterpret_cast<char*>(&path_point_)) + sizeof(steer_));
}

TrajectoryPoint::~TrajectoryPoint() {
  // @@protoc_insertion_point(destructor:apollo.common.TrajectoryPoint)
  SharedDtor();
}

void TrajectoryPoint::SharedDtor() {
  if (this != internal_default_instance()) delete path_point_;
}

void TrajectoryPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrajectoryPoint& TrajectoryPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrajectoryPoint_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto.base);
  return *internal_default_instance();
}


void TrajectoryPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.TrajectoryPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(path_point_ != nullptr);
    path_point_->Clear();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&v_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steer_) -
        reinterpret_cast<char*>(&v_)) + sizeof(steer_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TrajectoryPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.common.PathPoint path_point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_path_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double v = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_v(&has_bits);
          v_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double a = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_a(&has_bits);
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double relative_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_relative_time(&has_bits);
          relative_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double da = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_da(&has_bits);
          da_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double steer = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_steer(&has_bits);
          steer_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TrajectoryPoint::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.common.TrajectoryPoint)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.PathPoint path_point = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_path_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double v = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {
          _Internal::set_has_v(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double a = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {
          _Internal::set_has_a(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double relative_time = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {
          _Internal::set_has_relative_time(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &relative_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double da = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (41 & 0xFF)) {
          _Internal::set_has_da(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &da_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double steer = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (49 & 0xFF)) {
          _Internal::set_has_steer(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.common.TrajectoryPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.common.TrajectoryPoint)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TrajectoryPoint::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.common.TrajectoryPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.PathPoint path_point = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::path_point(this), output);
  }

  // optional double v = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->v(), output);
  }

  // optional double a = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->a(), output);
  }

  // optional double relative_time = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->relative_time(), output);
  }

  // optional double da = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(5, this->da(), output);
  }

  // optional double steer = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(6, this->steer(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.common.TrajectoryPoint)
}

::PROTOBUF_NAMESPACE_ID::uint8* TrajectoryPoint::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.TrajectoryPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.PathPoint path_point = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::path_point(this), target);
  }

  // optional double v = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->v(), target);
  }

  // optional double a = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->a(), target);
  }

  // optional double relative_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->relative_time(), target);
  }

  // optional double da = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->da(), target);
  }

  // optional double steer = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->steer(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.TrajectoryPoint)
  return target;
}

size_t TrajectoryPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.TrajectoryPoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .apollo.common.PathPoint path_point = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *path_point_);
    }

    // optional double v = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double a = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double relative_time = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double da = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double steer = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrajectoryPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.common.TrajectoryPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const TrajectoryPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrajectoryPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.common.TrajectoryPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.common.TrajectoryPoint)
    MergeFrom(*source);
  }
}

void TrajectoryPoint::MergeFrom(const TrajectoryPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.TrajectoryPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_path_point()->::apollo::common::PathPoint::MergeFrom(from.path_point());
    }
    if (cached_has_bits & 0x00000002u) {
      v_ = from.v_;
    }
    if (cached_has_bits & 0x00000004u) {
      a_ = from.a_;
    }
    if (cached_has_bits & 0x00000008u) {
      relative_time_ = from.relative_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      da_ = from.da_;
    }
    if (cached_has_bits & 0x00000020u) {
      steer_ = from.steer_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrajectoryPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.common.TrajectoryPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryPoint::CopyFrom(const TrajectoryPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.TrajectoryPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryPoint::IsInitialized() const {
  return true;
}

void TrajectoryPoint::InternalSwap(TrajectoryPoint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(path_point_, other->path_point_);
  swap(v_, other->v_);
  swap(a_, other->a_);
  swap(relative_time_, other->relative_time_);
  swap(da_, other->da_);
  swap(steer_, other->steer_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrajectoryPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::common::PathPoint* Arena::CreateMaybeMessage< ::apollo::common::PathPoint >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::common::PathPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::common::TrajectoryPoint* Arena::CreateMaybeMessage< ::apollo::common::TrajectoryPoint >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::common::TrajectoryPoint >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
