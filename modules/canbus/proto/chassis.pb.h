// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/canbus/proto/chassis.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fcanbus_2fproto_2fchassis_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fcanbus_2fproto_2fchassis_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/header.pb.h"
#include "modules/common/proto/vehicle_signal.pb.h"
#include "modules/common/proto/drive_state.pb.h"
#include "modules/common/proto/geometry.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fchassis_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fcanbus_2fproto_2fchassis_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fcanbus_2fproto_2fchassis_2eproto;
namespace apollo {
namespace canbus {
class Chassis;
class ChassisDefaultTypeInternal;
extern ChassisDefaultTypeInternal _Chassis_default_instance_;
class ChassisGPS;
class ChassisGPSDefaultTypeInternal;
extern ChassisGPSDefaultTypeInternal _ChassisGPS_default_instance_;
class License;
class LicenseDefaultTypeInternal;
extern LicenseDefaultTypeInternal _License_default_instance_;
}  // namespace canbus
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::canbus::Chassis* Arena::CreateMaybeMessage<::apollo::canbus::Chassis>(Arena*);
template<> ::apollo::canbus::ChassisGPS* Arena::CreateMaybeMessage<::apollo::canbus::ChassisGPS>(Arena*);
template<> ::apollo::canbus::License* Arena::CreateMaybeMessage<::apollo::canbus::License>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace canbus {

enum Chassis_DrivingMode : int {
  Chassis_DrivingMode_COMPLETE_MANUAL = 0,
  Chassis_DrivingMode_COMPLETE_AUTO_DRIVE = 1,
  Chassis_DrivingMode_AUTO_STEER_ONLY = 2,
  Chassis_DrivingMode_AUTO_SPEED_ONLY = 3,
  Chassis_DrivingMode_EMERGENCY_MODE = 4
};
bool Chassis_DrivingMode_IsValid(int value);
constexpr Chassis_DrivingMode Chassis_DrivingMode_DrivingMode_MIN = Chassis_DrivingMode_COMPLETE_MANUAL;
constexpr Chassis_DrivingMode Chassis_DrivingMode_DrivingMode_MAX = Chassis_DrivingMode_EMERGENCY_MODE;
constexpr int Chassis_DrivingMode_DrivingMode_ARRAYSIZE = Chassis_DrivingMode_DrivingMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Chassis_DrivingMode_descriptor();
template<typename T>
inline const std::string& Chassis_DrivingMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Chassis_DrivingMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Chassis_DrivingMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Chassis_DrivingMode_descriptor(), enum_t_value);
}
inline bool Chassis_DrivingMode_Parse(
    const std::string& name, Chassis_DrivingMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Chassis_DrivingMode>(
    Chassis_DrivingMode_descriptor(), name, value);
}
enum Chassis_ErrorCode : int {
  Chassis_ErrorCode_NO_ERROR = 0,
  Chassis_ErrorCode_CMD_NOT_IN_PERIOD = 1,
  Chassis_ErrorCode_CHASSIS_ERROR = 2,
  Chassis_ErrorCode_CHASSIS_ERROR_ON_STEER = 6,
  Chassis_ErrorCode_CHASSIS_ERROR_ON_BRAKE = 7,
  Chassis_ErrorCode_CHASSIS_ERROR_ON_THROTTLE = 8,
  Chassis_ErrorCode_CHASSIS_ERROR_ON_GEAR = 9,
  Chassis_ErrorCode_MANUAL_INTERVENTION = 3,
  Chassis_ErrorCode_CHASSIS_CAN_NOT_IN_PERIOD = 4,
  Chassis_ErrorCode_UNKNOWN_ERROR = 5
};
bool Chassis_ErrorCode_IsValid(int value);
constexpr Chassis_ErrorCode Chassis_ErrorCode_ErrorCode_MIN = Chassis_ErrorCode_NO_ERROR;
constexpr Chassis_ErrorCode Chassis_ErrorCode_ErrorCode_MAX = Chassis_ErrorCode_CHASSIS_ERROR_ON_GEAR;
constexpr int Chassis_ErrorCode_ErrorCode_ARRAYSIZE = Chassis_ErrorCode_ErrorCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Chassis_ErrorCode_descriptor();
template<typename T>
inline const std::string& Chassis_ErrorCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Chassis_ErrorCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Chassis_ErrorCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Chassis_ErrorCode_descriptor(), enum_t_value);
}
inline bool Chassis_ErrorCode_Parse(
    const std::string& name, Chassis_ErrorCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Chassis_ErrorCode>(
    Chassis_ErrorCode_descriptor(), name, value);
}
enum Chassis_GearPosition : int {
  Chassis_GearPosition_GEAR_NEUTRAL = 0,
  Chassis_GearPosition_GEAR_DRIVE = 1,
  Chassis_GearPosition_GEAR_REVERSE = 2,
  Chassis_GearPosition_GEAR_PARKING = 3,
  Chassis_GearPosition_GEAR_LOW = 4,
  Chassis_GearPosition_GEAR_INVALID = 5,
  Chassis_GearPosition_GEAR_NONE = 6
};
bool Chassis_GearPosition_IsValid(int value);
constexpr Chassis_GearPosition Chassis_GearPosition_GearPosition_MIN = Chassis_GearPosition_GEAR_NEUTRAL;
constexpr Chassis_GearPosition Chassis_GearPosition_GearPosition_MAX = Chassis_GearPosition_GEAR_NONE;
constexpr int Chassis_GearPosition_GearPosition_ARRAYSIZE = Chassis_GearPosition_GearPosition_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Chassis_GearPosition_descriptor();
template<typename T>
inline const std::string& Chassis_GearPosition_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Chassis_GearPosition>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Chassis_GearPosition_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Chassis_GearPosition_descriptor(), enum_t_value);
}
inline bool Chassis_GearPosition_Parse(
    const std::string& name, Chassis_GearPosition* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Chassis_GearPosition>(
    Chassis_GearPosition_descriptor(), name, value);
}
enum GpsQuality : int {
  FIX_NO = 0,
  FIX_2D = 1,
  FIX_3D = 2,
  FIX_INVALID = 3
};
bool GpsQuality_IsValid(int value);
constexpr GpsQuality GpsQuality_MIN = FIX_NO;
constexpr GpsQuality GpsQuality_MAX = FIX_INVALID;
constexpr int GpsQuality_ARRAYSIZE = GpsQuality_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GpsQuality_descriptor();
template<typename T>
inline const std::string& GpsQuality_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GpsQuality>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GpsQuality_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GpsQuality_descriptor(), enum_t_value);
}
inline bool GpsQuality_Parse(
    const std::string& name, GpsQuality* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GpsQuality>(
    GpsQuality_descriptor(), name, value);
}
// ===================================================================

class Chassis :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Chassis) */ {
 public:
  Chassis();
  virtual ~Chassis();

  Chassis(const Chassis& from);
  Chassis(Chassis&& from) noexcept
    : Chassis() {
    *this = ::std::move(from);
  }

  inline Chassis& operator=(const Chassis& from) {
    CopyFrom(from);
    return *this;
  }
  inline Chassis& operator=(Chassis&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Chassis& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Chassis* internal_default_instance() {
    return reinterpret_cast<const Chassis*>(
               &_Chassis_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Chassis& a, Chassis& b) {
    a.Swap(&b);
  }
  inline void Swap(Chassis* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Chassis* New() const final {
    return CreateMaybeMessage<Chassis>(nullptr);
  }

  Chassis* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Chassis>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Chassis& from);
  void MergeFrom(const Chassis& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Chassis* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Chassis";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcanbus_2fproto_2fchassis_2eproto);
    return ::descriptor_table_modules_2fcanbus_2fproto_2fchassis_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Chassis_DrivingMode DrivingMode;
  static constexpr DrivingMode COMPLETE_MANUAL =
    Chassis_DrivingMode_COMPLETE_MANUAL;
  static constexpr DrivingMode COMPLETE_AUTO_DRIVE =
    Chassis_DrivingMode_COMPLETE_AUTO_DRIVE;
  static constexpr DrivingMode AUTO_STEER_ONLY =
    Chassis_DrivingMode_AUTO_STEER_ONLY;
  static constexpr DrivingMode AUTO_SPEED_ONLY =
    Chassis_DrivingMode_AUTO_SPEED_ONLY;
  static constexpr DrivingMode EMERGENCY_MODE =
    Chassis_DrivingMode_EMERGENCY_MODE;
  static inline bool DrivingMode_IsValid(int value) {
    return Chassis_DrivingMode_IsValid(value);
  }
  static constexpr DrivingMode DrivingMode_MIN =
    Chassis_DrivingMode_DrivingMode_MIN;
  static constexpr DrivingMode DrivingMode_MAX =
    Chassis_DrivingMode_DrivingMode_MAX;
  static constexpr int DrivingMode_ARRAYSIZE =
    Chassis_DrivingMode_DrivingMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DrivingMode_descriptor() {
    return Chassis_DrivingMode_descriptor();
  }
  template<typename T>
  static inline const std::string& DrivingMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DrivingMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DrivingMode_Name.");
    return Chassis_DrivingMode_Name(enum_t_value);
  }
  static inline bool DrivingMode_Parse(const std::string& name,
      DrivingMode* value) {
    return Chassis_DrivingMode_Parse(name, value);
  }

  typedef Chassis_ErrorCode ErrorCode;
  static constexpr ErrorCode NO_ERROR =
    Chassis_ErrorCode_NO_ERROR;
  static constexpr ErrorCode CMD_NOT_IN_PERIOD =
    Chassis_ErrorCode_CMD_NOT_IN_PERIOD;
  static constexpr ErrorCode CHASSIS_ERROR =
    Chassis_ErrorCode_CHASSIS_ERROR;
  static constexpr ErrorCode CHASSIS_ERROR_ON_STEER =
    Chassis_ErrorCode_CHASSIS_ERROR_ON_STEER;
  static constexpr ErrorCode CHASSIS_ERROR_ON_BRAKE =
    Chassis_ErrorCode_CHASSIS_ERROR_ON_BRAKE;
  static constexpr ErrorCode CHASSIS_ERROR_ON_THROTTLE =
    Chassis_ErrorCode_CHASSIS_ERROR_ON_THROTTLE;
  static constexpr ErrorCode CHASSIS_ERROR_ON_GEAR =
    Chassis_ErrorCode_CHASSIS_ERROR_ON_GEAR;
  static constexpr ErrorCode MANUAL_INTERVENTION =
    Chassis_ErrorCode_MANUAL_INTERVENTION;
  static constexpr ErrorCode CHASSIS_CAN_NOT_IN_PERIOD =
    Chassis_ErrorCode_CHASSIS_CAN_NOT_IN_PERIOD;
  static constexpr ErrorCode UNKNOWN_ERROR =
    Chassis_ErrorCode_UNKNOWN_ERROR;
  static inline bool ErrorCode_IsValid(int value) {
    return Chassis_ErrorCode_IsValid(value);
  }
  static constexpr ErrorCode ErrorCode_MIN =
    Chassis_ErrorCode_ErrorCode_MIN;
  static constexpr ErrorCode ErrorCode_MAX =
    Chassis_ErrorCode_ErrorCode_MAX;
  static constexpr int ErrorCode_ARRAYSIZE =
    Chassis_ErrorCode_ErrorCode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ErrorCode_descriptor() {
    return Chassis_ErrorCode_descriptor();
  }
  template<typename T>
  static inline const std::string& ErrorCode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ErrorCode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ErrorCode_Name.");
    return Chassis_ErrorCode_Name(enum_t_value);
  }
  static inline bool ErrorCode_Parse(const std::string& name,
      ErrorCode* value) {
    return Chassis_ErrorCode_Parse(name, value);
  }

  typedef Chassis_GearPosition GearPosition;
  static constexpr GearPosition GEAR_NEUTRAL =
    Chassis_GearPosition_GEAR_NEUTRAL;
  static constexpr GearPosition GEAR_DRIVE =
    Chassis_GearPosition_GEAR_DRIVE;
  static constexpr GearPosition GEAR_REVERSE =
    Chassis_GearPosition_GEAR_REVERSE;
  static constexpr GearPosition GEAR_PARKING =
    Chassis_GearPosition_GEAR_PARKING;
  static constexpr GearPosition GEAR_LOW =
    Chassis_GearPosition_GEAR_LOW;
  static constexpr GearPosition GEAR_INVALID =
    Chassis_GearPosition_GEAR_INVALID;
  static constexpr GearPosition GEAR_NONE =
    Chassis_GearPosition_GEAR_NONE;
  static inline bool GearPosition_IsValid(int value) {
    return Chassis_GearPosition_IsValid(value);
  }
  static constexpr GearPosition GearPosition_MIN =
    Chassis_GearPosition_GearPosition_MIN;
  static constexpr GearPosition GearPosition_MAX =
    Chassis_GearPosition_GearPosition_MAX;
  static constexpr int GearPosition_ARRAYSIZE =
    Chassis_GearPosition_GearPosition_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  GearPosition_descriptor() {
    return Chassis_GearPosition_descriptor();
  }
  template<typename T>
  static inline const std::string& GearPosition_Name(T enum_t_value) {
    static_assert(::std::is_same<T, GearPosition>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function GearPosition_Name.");
    return Chassis_GearPosition_Name(enum_t_value);
  }
  static inline bool GearPosition_Parse(const std::string& name,
      GearPosition* value) {
    return Chassis_GearPosition_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 25,
    kSignalFieldNumber = 27,
    kEngageAdviceFieldNumber = 29,
    kLicenseFieldNumber = 32,
    kEngineRpmFieldNumber = 4,
    kSpeedMpsFieldNumber = 5,
    kOdometerMFieldNumber = 6,
    kFuelRangeMFieldNumber = 7,
    kThrottlePercentageFieldNumber = 8,
    kBrakePercentageFieldNumber = 9,
    kSteeringPercentageFieldNumber = 11,
    kEngineStartedFieldNumber = 3,
    kParkingBrakeFieldNumber = 13,
    kHighBeamSignalFieldNumber = 14,
    kLowBeamSignalFieldNumber = 15,
    kSteeringTorqueNmFieldNumber = 12,
    kLeftTurnSignalFieldNumber = 16,
    kRightTurnSignalFieldNumber = 17,
    kHornFieldNumber = 18,
    kWiperFieldNumber = 19,
    kDisengageStatusFieldNumber = 20,
    kDrivingModeFieldNumber = 21,
    kErrorCodeFieldNumber = 22,
    kGearLocationFieldNumber = 23,
    kSteeringTimestampFieldNumber = 24,
    kChassisErrorMaskFieldNumber = 26,
  };
  // optional .apollo.common.Header header = 25;
  bool has_header() const;
  void clear_header();
  const ::apollo::common::Header& header() const;
  ::apollo::common::Header* release_header();
  ::apollo::common::Header* mutable_header();
  void set_allocated_header(::apollo::common::Header* header);

  // optional .apollo.common.VehicleSignal signal = 27;
  bool has_signal() const;
  void clear_signal();
  const ::apollo::common::VehicleSignal& signal() const;
  ::apollo::common::VehicleSignal* release_signal();
  ::apollo::common::VehicleSignal* mutable_signal();
  void set_allocated_signal(::apollo::common::VehicleSignal* signal);

  // optional .apollo.common.EngageAdvice engage_advice = 29;
  bool has_engage_advice() const;
  void clear_engage_advice();
  const ::apollo::common::EngageAdvice& engage_advice() const;
  ::apollo::common::EngageAdvice* release_engage_advice();
  ::apollo::common::EngageAdvice* mutable_engage_advice();
  void set_allocated_engage_advice(::apollo::common::EngageAdvice* engage_advice);

  // optional .apollo.canbus.License license = 32 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_license() const;
  PROTOBUF_DEPRECATED void clear_license();
  PROTOBUF_DEPRECATED const ::apollo::canbus::License& license() const;
  PROTOBUF_DEPRECATED ::apollo::canbus::License* release_license();
  PROTOBUF_DEPRECATED ::apollo::canbus::License* mutable_license();
  PROTOBUF_DEPRECATED void set_allocated_license(::apollo::canbus::License* license);

  // optional float engine_rpm = 4 [default = 0];
  bool has_engine_rpm() const;
  void clear_engine_rpm();
  float engine_rpm() const;
  void set_engine_rpm(float value);

  // optional float speed_mps = 5 [default = 0];
  bool has_speed_mps() const;
  void clear_speed_mps();
  float speed_mps() const;
  void set_speed_mps(float value);

  // optional float odometer_m = 6 [default = 0];
  bool has_odometer_m() const;
  void clear_odometer_m();
  float odometer_m() const;
  void set_odometer_m(float value);

  // optional int32 fuel_range_m = 7;
  bool has_fuel_range_m() const;
  void clear_fuel_range_m();
  ::PROTOBUF_NAMESPACE_ID::int32 fuel_range_m() const;
  void set_fuel_range_m(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional float throttle_percentage = 8 [default = 0];
  bool has_throttle_percentage() const;
  void clear_throttle_percentage();
  float throttle_percentage() const;
  void set_throttle_percentage(float value);

  // optional float brake_percentage = 9 [default = 0];
  bool has_brake_percentage() const;
  void clear_brake_percentage();
  float brake_percentage() const;
  void set_brake_percentage(float value);

  // optional float steering_percentage = 11 [default = 0];
  bool has_steering_percentage() const;
  void clear_steering_percentage();
  float steering_percentage() const;
  void set_steering_percentage(float value);

  // optional bool engine_started = 3;
  bool has_engine_started() const;
  void clear_engine_started();
  bool engine_started() const;
  void set_engine_started(bool value);

  // optional bool parking_brake = 13;
  bool has_parking_brake() const;
  void clear_parking_brake();
  bool parking_brake() const;
  void set_parking_brake(bool value);

  // optional bool high_beam_signal = 14 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_high_beam_signal() const;
  PROTOBUF_DEPRECATED void clear_high_beam_signal();
  PROTOBUF_DEPRECATED bool high_beam_signal() const;
  PROTOBUF_DEPRECATED void set_high_beam_signal(bool value);

  // optional bool low_beam_signal = 15 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_low_beam_signal() const;
  PROTOBUF_DEPRECATED void clear_low_beam_signal();
  PROTOBUF_DEPRECATED bool low_beam_signal() const;
  PROTOBUF_DEPRECATED void set_low_beam_signal(bool value);

  // optional float steering_torque_nm = 12 [default = 0];
  bool has_steering_torque_nm() const;
  void clear_steering_torque_nm();
  float steering_torque_nm() const;
  void set_steering_torque_nm(float value);

  // optional bool left_turn_signal = 16 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_left_turn_signal() const;
  PROTOBUF_DEPRECATED void clear_left_turn_signal();
  PROTOBUF_DEPRECATED bool left_turn_signal() const;
  PROTOBUF_DEPRECATED void set_left_turn_signal(bool value);

  // optional bool right_turn_signal = 17 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_right_turn_signal() const;
  PROTOBUF_DEPRECATED void clear_right_turn_signal();
  PROTOBUF_DEPRECATED bool right_turn_signal() const;
  PROTOBUF_DEPRECATED void set_right_turn_signal(bool value);

  // optional bool horn = 18 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_horn() const;
  PROTOBUF_DEPRECATED void clear_horn();
  PROTOBUF_DEPRECATED bool horn() const;
  PROTOBUF_DEPRECATED void set_horn(bool value);

  // optional bool wiper = 19;
  bool has_wiper() const;
  void clear_wiper();
  bool wiper() const;
  void set_wiper(bool value);

  // optional bool disengage_status = 20 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_disengage_status() const;
  PROTOBUF_DEPRECATED void clear_disengage_status();
  PROTOBUF_DEPRECATED bool disengage_status() const;
  PROTOBUF_DEPRECATED void set_disengage_status(bool value);

  // optional .apollo.canbus.Chassis.DrivingMode driving_mode = 21 [default = COMPLETE_MANUAL];
  bool has_driving_mode() const;
  void clear_driving_mode();
  ::apollo::canbus::Chassis_DrivingMode driving_mode() const;
  void set_driving_mode(::apollo::canbus::Chassis_DrivingMode value);

  // optional .apollo.canbus.Chassis.ErrorCode error_code = 22 [default = NO_ERROR];
  bool has_error_code() const;
  void clear_error_code();
  ::apollo::canbus::Chassis_ErrorCode error_code() const;
  void set_error_code(::apollo::canbus::Chassis_ErrorCode value);

  // optional .apollo.canbus.Chassis.GearPosition gear_location = 23;
  bool has_gear_location() const;
  void clear_gear_location();
  ::apollo::canbus::Chassis_GearPosition gear_location() const;
  void set_gear_location(::apollo::canbus::Chassis_GearPosition value);

  // optional double steering_timestamp = 24;
  bool has_steering_timestamp() const;
  void clear_steering_timestamp();
  double steering_timestamp() const;
  void set_steering_timestamp(double value);

  // optional int32 chassis_error_mask = 26 [default = 0];
  bool has_chassis_error_mask() const;
  void clear_chassis_error_mask();
  ::PROTOBUF_NAMESPACE_ID::int32 chassis_error_mask() const;
  void set_chassis_error_mask(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:apollo.canbus.Chassis)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::apollo::common::Header* header_;
  ::apollo::common::VehicleSignal* signal_;
  ::apollo::common::EngageAdvice* engage_advice_;
  ::apollo::canbus::License* license_;
  float engine_rpm_;
  float speed_mps_;
  float odometer_m_;
  ::PROTOBUF_NAMESPACE_ID::int32 fuel_range_m_;
  float throttle_percentage_;
  float brake_percentage_;
  float steering_percentage_;
  bool engine_started_;
  bool parking_brake_;
  bool high_beam_signal_;
  bool low_beam_signal_;
  float steering_torque_nm_;
  bool left_turn_signal_;
  bool right_turn_signal_;
  bool horn_;
  bool wiper_;
  bool disengage_status_;
  int driving_mode_;
  int error_code_;
  int gear_location_;
  double steering_timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 chassis_error_mask_;
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2fchassis_2eproto;
};
// -------------------------------------------------------------------

class ChassisGPS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.ChassisGPS) */ {
 public:
  ChassisGPS();
  virtual ~ChassisGPS();

  ChassisGPS(const ChassisGPS& from);
  ChassisGPS(ChassisGPS&& from) noexcept
    : ChassisGPS() {
    *this = ::std::move(from);
  }

  inline ChassisGPS& operator=(const ChassisGPS& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChassisGPS& operator=(ChassisGPS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChassisGPS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChassisGPS* internal_default_instance() {
    return reinterpret_cast<const ChassisGPS*>(
               &_ChassisGPS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ChassisGPS& a, ChassisGPS& b) {
    a.Swap(&b);
  }
  inline void Swap(ChassisGPS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChassisGPS* New() const final {
    return CreateMaybeMessage<ChassisGPS>(nullptr);
  }

  ChassisGPS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChassisGPS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChassisGPS& from);
  void MergeFrom(const ChassisGPS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChassisGPS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.ChassisGPS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcanbus_2fproto_2fchassis_2eproto);
    return ::descriptor_table_modules_2fcanbus_2fproto_2fchassis_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatitudeFieldNumber = 1,
    kLongitudeFieldNumber = 2,
    kYearFieldNumber = 4,
    kMonthFieldNumber = 5,
    kDayFieldNumber = 6,
    kHoursFieldNumber = 7,
    kMinutesFieldNumber = 8,
    kSecondsFieldNumber = 9,
    kCompassDirectionFieldNumber = 10,
    kPdopFieldNumber = 11,
    kGpsValidFieldNumber = 3,
    kIsGpsFaultFieldNumber = 12,
    kIsInferredFieldNumber = 13,
    kQualityFieldNumber = 18,
    kAltitudeFieldNumber = 14,
    kHeadingFieldNumber = 15,
    kHdopFieldNumber = 16,
    kVdopFieldNumber = 17,
    kGpsSpeedFieldNumber = 20,
    kNumSatellitesFieldNumber = 19,
  };
  // optional double latitude = 1;
  bool has_latitude() const;
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);

  // optional double longitude = 2;
  bool has_longitude() const;
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);

  // optional int32 year = 4;
  bool has_year() const;
  void clear_year();
  ::PROTOBUF_NAMESPACE_ID::int32 year() const;
  void set_year(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 month = 5;
  bool has_month() const;
  void clear_month();
  ::PROTOBUF_NAMESPACE_ID::int32 month() const;
  void set_month(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 day = 6;
  bool has_day() const;
  void clear_day();
  ::PROTOBUF_NAMESPACE_ID::int32 day() const;
  void set_day(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 hours = 7;
  bool has_hours() const;
  void clear_hours();
  ::PROTOBUF_NAMESPACE_ID::int32 hours() const;
  void set_hours(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 minutes = 8;
  bool has_minutes() const;
  void clear_minutes();
  ::PROTOBUF_NAMESPACE_ID::int32 minutes() const;
  void set_minutes(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 seconds = 9;
  bool has_seconds() const;
  void clear_seconds();
  ::PROTOBUF_NAMESPACE_ID::int32 seconds() const;
  void set_seconds(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional double compass_direction = 10;
  bool has_compass_direction() const;
  void clear_compass_direction();
  double compass_direction() const;
  void set_compass_direction(double value);

  // optional double pdop = 11;
  bool has_pdop() const;
  void clear_pdop();
  double pdop() const;
  void set_pdop(double value);

  // optional bool gps_valid = 3;
  bool has_gps_valid() const;
  void clear_gps_valid();
  bool gps_valid() const;
  void set_gps_valid(bool value);

  // optional bool is_gps_fault = 12;
  bool has_is_gps_fault() const;
  void clear_is_gps_fault();
  bool is_gps_fault() const;
  void set_is_gps_fault(bool value);

  // optional bool is_inferred = 13;
  bool has_is_inferred() const;
  void clear_is_inferred();
  bool is_inferred() const;
  void set_is_inferred(bool value);

  // optional .apollo.canbus.GpsQuality quality = 18;
  bool has_quality() const;
  void clear_quality();
  ::apollo::canbus::GpsQuality quality() const;
  void set_quality(::apollo::canbus::GpsQuality value);

  // optional double altitude = 14;
  bool has_altitude() const;
  void clear_altitude();
  double altitude() const;
  void set_altitude(double value);

  // optional double heading = 15;
  bool has_heading() const;
  void clear_heading();
  double heading() const;
  void set_heading(double value);

  // optional double hdop = 16;
  bool has_hdop() const;
  void clear_hdop();
  double hdop() const;
  void set_hdop(double value);

  // optional double vdop = 17;
  bool has_vdop() const;
  void clear_vdop();
  double vdop() const;
  void set_vdop(double value);

  // optional double gps_speed = 20;
  bool has_gps_speed() const;
  void clear_gps_speed();
  double gps_speed() const;
  void set_gps_speed(double value);

  // optional int32 num_satellites = 19;
  bool has_num_satellites() const;
  void clear_num_satellites();
  ::PROTOBUF_NAMESPACE_ID::int32 num_satellites() const;
  void set_num_satellites(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:apollo.canbus.ChassisGPS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double latitude_;
  double longitude_;
  ::PROTOBUF_NAMESPACE_ID::int32 year_;
  ::PROTOBUF_NAMESPACE_ID::int32 month_;
  ::PROTOBUF_NAMESPACE_ID::int32 day_;
  ::PROTOBUF_NAMESPACE_ID::int32 hours_;
  ::PROTOBUF_NAMESPACE_ID::int32 minutes_;
  ::PROTOBUF_NAMESPACE_ID::int32 seconds_;
  double compass_direction_;
  double pdop_;
  bool gps_valid_;
  bool is_gps_fault_;
  bool is_inferred_;
  int quality_;
  double altitude_;
  double heading_;
  double hdop_;
  double vdop_;
  double gps_speed_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_satellites_;
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2fchassis_2eproto;
};
// -------------------------------------------------------------------

class License :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.License) */ {
 public:
  License();
  virtual ~License();

  License(const License& from);
  License(License&& from) noexcept
    : License() {
    *this = ::std::move(from);
  }

  inline License& operator=(const License& from) {
    CopyFrom(from);
    return *this;
  }
  inline License& operator=(License&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const License& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const License* internal_default_instance() {
    return reinterpret_cast<const License*>(
               &_License_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(License& a, License& b) {
    a.Swap(&b);
  }
  inline void Swap(License* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline License* New() const final {
    return CreateMaybeMessage<License>(nullptr);
  }

  License* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<License>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const License& from);
  void MergeFrom(const License& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(License* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.License";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fcanbus_2fproto_2fchassis_2eproto);
    return ::descriptor_table_modules_2fcanbus_2fproto_2fchassis_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVinFieldNumber = 1,
  };
  // optional string vin = 1 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_vin() const;
  PROTOBUF_DEPRECATED void clear_vin();
  PROTOBUF_DEPRECATED const std::string& vin() const;
  PROTOBUF_DEPRECATED void set_vin(const std::string& value);
  PROTOBUF_DEPRECATED void set_vin(std::string&& value);
  PROTOBUF_DEPRECATED void set_vin(const char* value);
  PROTOBUF_DEPRECATED void set_vin(const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* mutable_vin();
  PROTOBUF_DEPRECATED std::string* release_vin();
  PROTOBUF_DEPRECATED void set_allocated_vin(std::string* vin);

  // @@protoc_insertion_point(class_scope:apollo.canbus.License)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vin_;
  friend struct ::TableStruct_modules_2fcanbus_2fproto_2fchassis_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Chassis

// optional bool engine_started = 3;
inline bool Chassis::has_engine_started() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Chassis::clear_engine_started() {
  engine_started_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool Chassis::engine_started() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.engine_started)
  return engine_started_;
}
inline void Chassis::set_engine_started(bool value) {
  _has_bits_[0] |= 0x00000800u;
  engine_started_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.engine_started)
}

// optional float engine_rpm = 4 [default = 0];
inline bool Chassis::has_engine_rpm() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Chassis::clear_engine_rpm() {
  engine_rpm_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float Chassis::engine_rpm() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.engine_rpm)
  return engine_rpm_;
}
inline void Chassis::set_engine_rpm(float value) {
  _has_bits_[0] |= 0x00000010u;
  engine_rpm_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.engine_rpm)
}

// optional float speed_mps = 5 [default = 0];
inline bool Chassis::has_speed_mps() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Chassis::clear_speed_mps() {
  speed_mps_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float Chassis::speed_mps() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.speed_mps)
  return speed_mps_;
}
inline void Chassis::set_speed_mps(float value) {
  _has_bits_[0] |= 0x00000020u;
  speed_mps_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.speed_mps)
}

// optional float odometer_m = 6 [default = 0];
inline bool Chassis::has_odometer_m() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Chassis::clear_odometer_m() {
  odometer_m_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float Chassis::odometer_m() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.odometer_m)
  return odometer_m_;
}
inline void Chassis::set_odometer_m(float value) {
  _has_bits_[0] |= 0x00000040u;
  odometer_m_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.odometer_m)
}

// optional int32 fuel_range_m = 7;
inline bool Chassis::has_fuel_range_m() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Chassis::clear_fuel_range_m() {
  fuel_range_m_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Chassis::fuel_range_m() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.fuel_range_m)
  return fuel_range_m_;
}
inline void Chassis::set_fuel_range_m(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  fuel_range_m_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.fuel_range_m)
}

// optional float throttle_percentage = 8 [default = 0];
inline bool Chassis::has_throttle_percentage() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Chassis::clear_throttle_percentage() {
  throttle_percentage_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float Chassis::throttle_percentage() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.throttle_percentage)
  return throttle_percentage_;
}
inline void Chassis::set_throttle_percentage(float value) {
  _has_bits_[0] |= 0x00000100u;
  throttle_percentage_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.throttle_percentage)
}

// optional float brake_percentage = 9 [default = 0];
inline bool Chassis::has_brake_percentage() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Chassis::clear_brake_percentage() {
  brake_percentage_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline float Chassis::brake_percentage() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.brake_percentage)
  return brake_percentage_;
}
inline void Chassis::set_brake_percentage(float value) {
  _has_bits_[0] |= 0x00000200u;
  brake_percentage_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.brake_percentage)
}

// optional float steering_percentage = 11 [default = 0];
inline bool Chassis::has_steering_percentage() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Chassis::clear_steering_percentage() {
  steering_percentage_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float Chassis::steering_percentage() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.steering_percentage)
  return steering_percentage_;
}
inline void Chassis::set_steering_percentage(float value) {
  _has_bits_[0] |= 0x00000400u;
  steering_percentage_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.steering_percentage)
}

// optional float steering_torque_nm = 12 [default = 0];
inline bool Chassis::has_steering_torque_nm() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Chassis::clear_steering_torque_nm() {
  steering_torque_nm_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline float Chassis::steering_torque_nm() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.steering_torque_nm)
  return steering_torque_nm_;
}
inline void Chassis::set_steering_torque_nm(float value) {
  _has_bits_[0] |= 0x00008000u;
  steering_torque_nm_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.steering_torque_nm)
}

// optional bool parking_brake = 13;
inline bool Chassis::has_parking_brake() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Chassis::clear_parking_brake() {
  parking_brake_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool Chassis::parking_brake() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.parking_brake)
  return parking_brake_;
}
inline void Chassis::set_parking_brake(bool value) {
  _has_bits_[0] |= 0x00001000u;
  parking_brake_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.parking_brake)
}

// optional bool high_beam_signal = 14 [deprecated = true];
inline bool Chassis::has_high_beam_signal() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Chassis::clear_high_beam_signal() {
  high_beam_signal_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool Chassis::high_beam_signal() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.high_beam_signal)
  return high_beam_signal_;
}
inline void Chassis::set_high_beam_signal(bool value) {
  _has_bits_[0] |= 0x00002000u;
  high_beam_signal_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.high_beam_signal)
}

// optional bool low_beam_signal = 15 [deprecated = true];
inline bool Chassis::has_low_beam_signal() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Chassis::clear_low_beam_signal() {
  low_beam_signal_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool Chassis::low_beam_signal() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.low_beam_signal)
  return low_beam_signal_;
}
inline void Chassis::set_low_beam_signal(bool value) {
  _has_bits_[0] |= 0x00004000u;
  low_beam_signal_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.low_beam_signal)
}

// optional bool left_turn_signal = 16 [deprecated = true];
inline bool Chassis::has_left_turn_signal() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Chassis::clear_left_turn_signal() {
  left_turn_signal_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool Chassis::left_turn_signal() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.left_turn_signal)
  return left_turn_signal_;
}
inline void Chassis::set_left_turn_signal(bool value) {
  _has_bits_[0] |= 0x00010000u;
  left_turn_signal_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.left_turn_signal)
}

// optional bool right_turn_signal = 17 [deprecated = true];
inline bool Chassis::has_right_turn_signal() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Chassis::clear_right_turn_signal() {
  right_turn_signal_ = false;
  _has_bits_[0] &= ~0x00020000u;
}
inline bool Chassis::right_turn_signal() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.right_turn_signal)
  return right_turn_signal_;
}
inline void Chassis::set_right_turn_signal(bool value) {
  _has_bits_[0] |= 0x00020000u;
  right_turn_signal_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.right_turn_signal)
}

// optional bool horn = 18 [deprecated = true];
inline bool Chassis::has_horn() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Chassis::clear_horn() {
  horn_ = false;
  _has_bits_[0] &= ~0x00040000u;
}
inline bool Chassis::horn() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.horn)
  return horn_;
}
inline void Chassis::set_horn(bool value) {
  _has_bits_[0] |= 0x00040000u;
  horn_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.horn)
}

// optional bool wiper = 19;
inline bool Chassis::has_wiper() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Chassis::clear_wiper() {
  wiper_ = false;
  _has_bits_[0] &= ~0x00080000u;
}
inline bool Chassis::wiper() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.wiper)
  return wiper_;
}
inline void Chassis::set_wiper(bool value) {
  _has_bits_[0] |= 0x00080000u;
  wiper_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.wiper)
}

// optional bool disengage_status = 20 [deprecated = true];
inline bool Chassis::has_disengage_status() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Chassis::clear_disengage_status() {
  disengage_status_ = false;
  _has_bits_[0] &= ~0x00100000u;
}
inline bool Chassis::disengage_status() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.disengage_status)
  return disengage_status_;
}
inline void Chassis::set_disengage_status(bool value) {
  _has_bits_[0] |= 0x00100000u;
  disengage_status_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.disengage_status)
}

// optional .apollo.canbus.Chassis.DrivingMode driving_mode = 21 [default = COMPLETE_MANUAL];
inline bool Chassis::has_driving_mode() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Chassis::clear_driving_mode() {
  driving_mode_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::apollo::canbus::Chassis_DrivingMode Chassis::driving_mode() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.driving_mode)
  return static_cast< ::apollo::canbus::Chassis_DrivingMode >(driving_mode_);
}
inline void Chassis::set_driving_mode(::apollo::canbus::Chassis_DrivingMode value) {
  assert(::apollo::canbus::Chassis_DrivingMode_IsValid(value));
  _has_bits_[0] |= 0x00200000u;
  driving_mode_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.driving_mode)
}

// optional .apollo.canbus.Chassis.ErrorCode error_code = 22 [default = NO_ERROR];
inline bool Chassis::has_error_code() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Chassis::clear_error_code() {
  error_code_ = 0;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::apollo::canbus::Chassis_ErrorCode Chassis::error_code() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.error_code)
  return static_cast< ::apollo::canbus::Chassis_ErrorCode >(error_code_);
}
inline void Chassis::set_error_code(::apollo::canbus::Chassis_ErrorCode value) {
  assert(::apollo::canbus::Chassis_ErrorCode_IsValid(value));
  _has_bits_[0] |= 0x00400000u;
  error_code_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.error_code)
}

// optional .apollo.canbus.Chassis.GearPosition gear_location = 23;
inline bool Chassis::has_gear_location() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void Chassis::clear_gear_location() {
  gear_location_ = 0;
  _has_bits_[0] &= ~0x00800000u;
}
inline ::apollo::canbus::Chassis_GearPosition Chassis::gear_location() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.gear_location)
  return static_cast< ::apollo::canbus::Chassis_GearPosition >(gear_location_);
}
inline void Chassis::set_gear_location(::apollo::canbus::Chassis_GearPosition value) {
  assert(::apollo::canbus::Chassis_GearPosition_IsValid(value));
  _has_bits_[0] |= 0x00800000u;
  gear_location_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.gear_location)
}

// optional double steering_timestamp = 24;
inline bool Chassis::has_steering_timestamp() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void Chassis::clear_steering_timestamp() {
  steering_timestamp_ = 0;
  _has_bits_[0] &= ~0x01000000u;
}
inline double Chassis::steering_timestamp() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.steering_timestamp)
  return steering_timestamp_;
}
inline void Chassis::set_steering_timestamp(double value) {
  _has_bits_[0] |= 0x01000000u;
  steering_timestamp_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.steering_timestamp)
}

// optional .apollo.common.Header header = 25;
inline bool Chassis::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::apollo::common::Header& Chassis::header() const {
  const ::apollo::common::Header* p = header_;
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::common::Header*>(
      &::apollo::common::_Header_default_instance_);
}
inline ::apollo::common::Header* Chassis::release_header() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Chassis.header)
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::common::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::apollo::common::Header* Chassis::mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Chassis.header)
  return header_;
}
inline void Chassis::set_allocated_header(::apollo::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Chassis.header)
}

// optional int32 chassis_error_mask = 26 [default = 0];
inline bool Chassis::has_chassis_error_mask() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void Chassis::clear_chassis_error_mask() {
  chassis_error_mask_ = 0;
  _has_bits_[0] &= ~0x02000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Chassis::chassis_error_mask() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.chassis_error_mask)
  return chassis_error_mask_;
}
inline void Chassis::set_chassis_error_mask(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x02000000u;
  chassis_error_mask_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Chassis.chassis_error_mask)
}

// optional .apollo.common.VehicleSignal signal = 27;
inline bool Chassis::has_signal() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::apollo::common::VehicleSignal& Chassis::signal() const {
  const ::apollo::common::VehicleSignal* p = signal_;
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.signal)
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::common::VehicleSignal*>(
      &::apollo::common::_VehicleSignal_default_instance_);
}
inline ::apollo::common::VehicleSignal* Chassis::release_signal() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Chassis.signal)
  _has_bits_[0] &= ~0x00000002u;
  ::apollo::common::VehicleSignal* temp = signal_;
  signal_ = nullptr;
  return temp;
}
inline ::apollo::common::VehicleSignal* Chassis::mutable_signal() {
  _has_bits_[0] |= 0x00000002u;
  if (signal_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::VehicleSignal>(GetArenaNoVirtual());
    signal_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Chassis.signal)
  return signal_;
}
inline void Chassis::set_allocated_signal(::apollo::common::VehicleSignal* signal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(signal_);
  }
  if (signal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      signal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signal, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  signal_ = signal;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Chassis.signal)
}

// optional .apollo.common.EngageAdvice engage_advice = 29;
inline bool Chassis::has_engage_advice() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::apollo::common::EngageAdvice& Chassis::engage_advice() const {
  const ::apollo::common::EngageAdvice* p = engage_advice_;
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.engage_advice)
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::common::EngageAdvice*>(
      &::apollo::common::_EngageAdvice_default_instance_);
}
inline ::apollo::common::EngageAdvice* Chassis::release_engage_advice() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Chassis.engage_advice)
  _has_bits_[0] &= ~0x00000004u;
  ::apollo::common::EngageAdvice* temp = engage_advice_;
  engage_advice_ = nullptr;
  return temp;
}
inline ::apollo::common::EngageAdvice* Chassis::mutable_engage_advice() {
  _has_bits_[0] |= 0x00000004u;
  if (engage_advice_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::EngageAdvice>(GetArenaNoVirtual());
    engage_advice_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Chassis.engage_advice)
  return engage_advice_;
}
inline void Chassis::set_allocated_engage_advice(::apollo::common::EngageAdvice* engage_advice) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(engage_advice_);
  }
  if (engage_advice) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      engage_advice = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, engage_advice, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  engage_advice_ = engage_advice;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Chassis.engage_advice)
}

// optional .apollo.canbus.License license = 32 [deprecated = true];
inline bool Chassis::has_license() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Chassis::clear_license() {
  if (license_ != nullptr) license_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::apollo::canbus::License& Chassis::license() const {
  const ::apollo::canbus::License* p = license_;
  // @@protoc_insertion_point(field_get:apollo.canbus.Chassis.license)
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::canbus::License*>(
      &::apollo::canbus::_License_default_instance_);
}
inline ::apollo::canbus::License* Chassis::release_license() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Chassis.license)
  _has_bits_[0] &= ~0x00000008u;
  ::apollo::canbus::License* temp = license_;
  license_ = nullptr;
  return temp;
}
inline ::apollo::canbus::License* Chassis::mutable_license() {
  _has_bits_[0] |= 0x00000008u;
  if (license_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::License>(GetArenaNoVirtual());
    license_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Chassis.license)
  return license_;
}
inline void Chassis::set_allocated_license(::apollo::canbus::License* license) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete license_;
  }
  if (license) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      license = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, license, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  license_ = license;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Chassis.license)
}

// -------------------------------------------------------------------

// ChassisGPS

// optional double latitude = 1;
inline bool ChassisGPS::has_latitude() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChassisGPS::clear_latitude() {
  latitude_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double ChassisGPS::latitude() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisGPS.latitude)
  return latitude_;
}
inline void ChassisGPS::set_latitude(double value) {
  _has_bits_[0] |= 0x00000001u;
  latitude_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.ChassisGPS.latitude)
}

// optional double longitude = 2;
inline bool ChassisGPS::has_longitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChassisGPS::clear_longitude() {
  longitude_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double ChassisGPS::longitude() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisGPS.longitude)
  return longitude_;
}
inline void ChassisGPS::set_longitude(double value) {
  _has_bits_[0] |= 0x00000002u;
  longitude_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.ChassisGPS.longitude)
}

// optional bool gps_valid = 3;
inline bool ChassisGPS::has_gps_valid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ChassisGPS::clear_gps_valid() {
  gps_valid_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool ChassisGPS::gps_valid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisGPS.gps_valid)
  return gps_valid_;
}
inline void ChassisGPS::set_gps_valid(bool value) {
  _has_bits_[0] |= 0x00000400u;
  gps_valid_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.ChassisGPS.gps_valid)
}

// optional int32 year = 4;
inline bool ChassisGPS::has_year() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChassisGPS::clear_year() {
  year_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChassisGPS::year() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisGPS.year)
  return year_;
}
inline void ChassisGPS::set_year(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  year_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.ChassisGPS.year)
}

// optional int32 month = 5;
inline bool ChassisGPS::has_month() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChassisGPS::clear_month() {
  month_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChassisGPS::month() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisGPS.month)
  return month_;
}
inline void ChassisGPS::set_month(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  month_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.ChassisGPS.month)
}

// optional int32 day = 6;
inline bool ChassisGPS::has_day() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChassisGPS::clear_day() {
  day_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChassisGPS::day() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisGPS.day)
  return day_;
}
inline void ChassisGPS::set_day(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  day_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.ChassisGPS.day)
}

// optional int32 hours = 7;
inline bool ChassisGPS::has_hours() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ChassisGPS::clear_hours() {
  hours_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChassisGPS::hours() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisGPS.hours)
  return hours_;
}
inline void ChassisGPS::set_hours(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  hours_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.ChassisGPS.hours)
}

// optional int32 minutes = 8;
inline bool ChassisGPS::has_minutes() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ChassisGPS::clear_minutes() {
  minutes_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChassisGPS::minutes() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisGPS.minutes)
  return minutes_;
}
inline void ChassisGPS::set_minutes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  minutes_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.ChassisGPS.minutes)
}

// optional int32 seconds = 9;
inline bool ChassisGPS::has_seconds() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ChassisGPS::clear_seconds() {
  seconds_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChassisGPS::seconds() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisGPS.seconds)
  return seconds_;
}
inline void ChassisGPS::set_seconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  seconds_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.ChassisGPS.seconds)
}

// optional double compass_direction = 10;
inline bool ChassisGPS::has_compass_direction() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ChassisGPS::clear_compass_direction() {
  compass_direction_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double ChassisGPS::compass_direction() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisGPS.compass_direction)
  return compass_direction_;
}
inline void ChassisGPS::set_compass_direction(double value) {
  _has_bits_[0] |= 0x00000100u;
  compass_direction_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.ChassisGPS.compass_direction)
}

// optional double pdop = 11;
inline bool ChassisGPS::has_pdop() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ChassisGPS::clear_pdop() {
  pdop_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline double ChassisGPS::pdop() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisGPS.pdop)
  return pdop_;
}
inline void ChassisGPS::set_pdop(double value) {
  _has_bits_[0] |= 0x00000200u;
  pdop_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.ChassisGPS.pdop)
}

// optional bool is_gps_fault = 12;
inline bool ChassisGPS::has_is_gps_fault() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ChassisGPS::clear_is_gps_fault() {
  is_gps_fault_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool ChassisGPS::is_gps_fault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisGPS.is_gps_fault)
  return is_gps_fault_;
}
inline void ChassisGPS::set_is_gps_fault(bool value) {
  _has_bits_[0] |= 0x00000800u;
  is_gps_fault_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.ChassisGPS.is_gps_fault)
}

// optional bool is_inferred = 13;
inline bool ChassisGPS::has_is_inferred() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ChassisGPS::clear_is_inferred() {
  is_inferred_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool ChassisGPS::is_inferred() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisGPS.is_inferred)
  return is_inferred_;
}
inline void ChassisGPS::set_is_inferred(bool value) {
  _has_bits_[0] |= 0x00001000u;
  is_inferred_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.ChassisGPS.is_inferred)
}

// optional double altitude = 14;
inline bool ChassisGPS::has_altitude() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ChassisGPS::clear_altitude() {
  altitude_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline double ChassisGPS::altitude() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisGPS.altitude)
  return altitude_;
}
inline void ChassisGPS::set_altitude(double value) {
  _has_bits_[0] |= 0x00004000u;
  altitude_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.ChassisGPS.altitude)
}

// optional double heading = 15;
inline bool ChassisGPS::has_heading() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ChassisGPS::clear_heading() {
  heading_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline double ChassisGPS::heading() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisGPS.heading)
  return heading_;
}
inline void ChassisGPS::set_heading(double value) {
  _has_bits_[0] |= 0x00008000u;
  heading_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.ChassisGPS.heading)
}

// optional double hdop = 16;
inline bool ChassisGPS::has_hdop() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ChassisGPS::clear_hdop() {
  hdop_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline double ChassisGPS::hdop() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisGPS.hdop)
  return hdop_;
}
inline void ChassisGPS::set_hdop(double value) {
  _has_bits_[0] |= 0x00010000u;
  hdop_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.ChassisGPS.hdop)
}

// optional double vdop = 17;
inline bool ChassisGPS::has_vdop() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ChassisGPS::clear_vdop() {
  vdop_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline double ChassisGPS::vdop() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisGPS.vdop)
  return vdop_;
}
inline void ChassisGPS::set_vdop(double value) {
  _has_bits_[0] |= 0x00020000u;
  vdop_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.ChassisGPS.vdop)
}

// optional .apollo.canbus.GpsQuality quality = 18;
inline bool ChassisGPS::has_quality() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ChassisGPS::clear_quality() {
  quality_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::apollo::canbus::GpsQuality ChassisGPS::quality() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisGPS.quality)
  return static_cast< ::apollo::canbus::GpsQuality >(quality_);
}
inline void ChassisGPS::set_quality(::apollo::canbus::GpsQuality value) {
  assert(::apollo::canbus::GpsQuality_IsValid(value));
  _has_bits_[0] |= 0x00002000u;
  quality_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.ChassisGPS.quality)
}

// optional int32 num_satellites = 19;
inline bool ChassisGPS::has_num_satellites() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ChassisGPS::clear_num_satellites() {
  num_satellites_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChassisGPS::num_satellites() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisGPS.num_satellites)
  return num_satellites_;
}
inline void ChassisGPS::set_num_satellites(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00080000u;
  num_satellites_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.ChassisGPS.num_satellites)
}

// optional double gps_speed = 20;
inline bool ChassisGPS::has_gps_speed() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ChassisGPS::clear_gps_speed() {
  gps_speed_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline double ChassisGPS::gps_speed() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.ChassisGPS.gps_speed)
  return gps_speed_;
}
inline void ChassisGPS::set_gps_speed(double value) {
  _has_bits_[0] |= 0x00040000u;
  gps_speed_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.ChassisGPS.gps_speed)
}

// -------------------------------------------------------------------

// License

// optional string vin = 1 [deprecated = true];
inline bool License::has_vin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void License::clear_vin() {
  vin_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& License::vin() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.License.vin)
  return vin_.GetNoArena();
}
inline void License::set_vin(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  vin_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.canbus.License.vin)
}
inline void License::set_vin(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  vin_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.canbus.License.vin)
}
inline void License::set_vin(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  vin_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.canbus.License.vin)
}
inline void License::set_vin(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  vin_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.canbus.License.vin)
}
inline std::string* License::mutable_vin() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:apollo.canbus.License.vin)
  return vin_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* License::release_vin() {
  // @@protoc_insertion_point(field_release:apollo.canbus.License.vin)
  if (!has_vin()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return vin_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void License::set_allocated_vin(std::string* vin) {
  if (vin != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  vin_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vin);
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.License.vin)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace canbus
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::canbus::Chassis_DrivingMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Chassis_DrivingMode>() {
  return ::apollo::canbus::Chassis_DrivingMode_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Chassis_ErrorCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Chassis_ErrorCode>() {
  return ::apollo::canbus::Chassis_ErrorCode_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Chassis_GearPosition> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Chassis_GearPosition>() {
  return ::apollo::canbus::Chassis_GearPosition_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::GpsQuality> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::GpsQuality>() {
  return ::apollo::canbus::GpsQuality_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fcanbus_2fproto_2fchassis_2eproto
