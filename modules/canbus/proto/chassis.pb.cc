// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/canbus/proto/chassis.proto

#include "modules/canbus/proto/chassis.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcanbus_2fproto_2fchassis_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_License_modules_2fcanbus_2fproto_2fchassis_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_2fproto_2fdrive_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EngageAdvice_modules_2fcommon_2fproto_2fdrive_5fstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_2fproto_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Header_modules_2fcommon_2fproto_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_2fproto_2fvehicle_5fsignal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VehicleSignal_modules_2fcommon_2fproto_2fvehicle_5fsignal_2eproto;
namespace apollo {
namespace canbus {
class ChassisDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Chassis> _instance;
} _Chassis_default_instance_;
class ChassisGPSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChassisGPS> _instance;
} _ChassisGPS_default_instance_;
class LicenseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<License> _instance;
} _License_default_instance_;
}  // namespace canbus
}  // namespace apollo
static void InitDefaultsscc_info_Chassis_modules_2fcanbus_2fproto_2fchassis_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Chassis_default_instance_;
    new (ptr) ::apollo::canbus::Chassis();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Chassis::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Chassis_modules_2fcanbus_2fproto_2fchassis_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_Chassis_modules_2fcanbus_2fproto_2fchassis_2eproto}, {
      &scc_info_Header_modules_2fcommon_2fproto_2fheader_2eproto.base,
      &scc_info_VehicleSignal_modules_2fcommon_2fproto_2fvehicle_5fsignal_2eproto.base,
      &scc_info_EngageAdvice_modules_2fcommon_2fproto_2fdrive_5fstate_2eproto.base,
      &scc_info_License_modules_2fcanbus_2fproto_2fchassis_2eproto.base,}};

static void InitDefaultsscc_info_ChassisGPS_modules_2fcanbus_2fproto_2fchassis_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_ChassisGPS_default_instance_;
    new (ptr) ::apollo::canbus::ChassisGPS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::ChassisGPS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChassisGPS_modules_2fcanbus_2fproto_2fchassis_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ChassisGPS_modules_2fcanbus_2fproto_2fchassis_2eproto}, {}};

static void InitDefaultsscc_info_License_modules_2fcanbus_2fproto_2fchassis_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_License_default_instance_;
    new (ptr) ::apollo::canbus::License();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::License::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_License_modules_2fcanbus_2fproto_2fchassis_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_License_modules_2fcanbus_2fproto_2fchassis_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fcanbus_2fproto_2fchassis_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fcanbus_2fproto_2fchassis_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fcanbus_2fproto_2fchassis_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Chassis, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Chassis, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Chassis, engine_started_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Chassis, engine_rpm_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Chassis, speed_mps_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Chassis, odometer_m_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Chassis, fuel_range_m_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Chassis, throttle_percentage_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Chassis, brake_percentage_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Chassis, steering_percentage_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Chassis, steering_torque_nm_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Chassis, parking_brake_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Chassis, high_beam_signal_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Chassis, low_beam_signal_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Chassis, left_turn_signal_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Chassis, right_turn_signal_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Chassis, horn_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Chassis, wiper_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Chassis, disengage_status_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Chassis, driving_mode_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Chassis, error_code_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Chassis, gear_location_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Chassis, steering_timestamp_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Chassis, header_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Chassis, chassis_error_mask_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Chassis, signal_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Chassis, engage_advice_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::Chassis, license_),
  11,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  15,
  12,
  13,
  14,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  0,
  25,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisGPS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisGPS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisGPS, latitude_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisGPS, longitude_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisGPS, gps_valid_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisGPS, year_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisGPS, month_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisGPS, day_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisGPS, hours_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisGPS, minutes_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisGPS, seconds_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisGPS, compass_direction_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisGPS, pdop_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisGPS, is_gps_fault_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisGPS, is_inferred_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisGPS, altitude_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisGPS, heading_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisGPS, hdop_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisGPS, vdop_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisGPS, quality_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisGPS, num_satellites_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::ChassisGPS, gps_speed_),
  0,
  1,
  10,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  11,
  12,
  14,
  15,
  16,
  17,
  13,
  19,
  18,
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::License, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::License, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::canbus::License, vin_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 31, sizeof(::apollo::canbus::Chassis)},
  { 57, 82, sizeof(::apollo::canbus::ChassisGPS)},
  { 102, 108, sizeof(::apollo::canbus::License)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_Chassis_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_ChassisGPS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::canbus::_License_default_instance_),
};

const char descriptor_table_protodef_modules_2fcanbus_2fproto_2fchassis_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\"modules/canbus/proto/chassis.proto\022\rap"
  "ollo.canbus\032!modules/common/proto/header"
  ".proto\032)modules/common/proto/vehicle_sig"
  "nal.proto\032&modules/common/proto/drive_st"
  "ate.proto\032#modules/common/proto/geometry"
  ".proto\"\201\013\n\007Chassis\022\026\n\016engine_started\030\003 \001"
  "(\010\022\025\n\nengine_rpm\030\004 \001(\002:\0010\022\024\n\tspeed_mps\030\005"
  " \001(\002:\0010\022\025\n\nodometer_m\030\006 \001(\002:\0010\022\024\n\014fuel_r"
  "ange_m\030\007 \001(\005\022\036\n\023throttle_percentage\030\010 \001("
  "\002:\0010\022\033\n\020brake_percentage\030\t \001(\002:\0010\022\036\n\023ste"
  "ering_percentage\030\013 \001(\002:\0010\022\035\n\022steering_to"
  "rque_nm\030\014 \001(\002:\0010\022\025\n\rparking_brake\030\r \001(\010\022"
  "\034\n\020high_beam_signal\030\016 \001(\010B\002\030\001\022\033\n\017low_bea"
  "m_signal\030\017 \001(\010B\002\030\001\022\034\n\020left_turn_signal\030\020"
  " \001(\010B\002\030\001\022\035\n\021right_turn_signal\030\021 \001(\010B\002\030\001\022"
  "\020\n\004horn\030\022 \001(\010B\002\030\001\022\r\n\005wiper\030\023 \001(\010\022\034\n\020dise"
  "ngage_status\030\024 \001(\010B\002\030\001\022I\n\014driving_mode\030\025"
  " \001(\0162\".apollo.canbus.Chassis.DrivingMode"
  ":\017COMPLETE_MANUAL\022>\n\nerror_code\030\026 \001(\0162 ."
  "apollo.canbus.Chassis.ErrorCode:\010NO_ERRO"
  "R\022:\n\rgear_location\030\027 \001(\0162#.apollo.canbus"
  ".Chassis.GearPosition\022\032\n\022steering_timest"
  "amp\030\030 \001(\001\022%\n\006header\030\031 \001(\0132\025.apollo.commo"
  "n.Header\022\035\n\022chassis_error_mask\030\032 \001(\005:\0010\022"
  ",\n\006signal\030\033 \001(\0132\034.apollo.common.VehicleS"
  "ignal\0222\n\rengage_advice\030\035 \001(\0132\033.apollo.co"
  "mmon.EngageAdvice\022+\n\007license\030  \001(\0132\026.apo"
  "llo.canbus.LicenseB\002\030\001\"y\n\013DrivingMode\022\023\n"
  "\017COMPLETE_MANUAL\020\000\022\027\n\023COMPLETE_AUTO_DRIV"
  "E\020\001\022\023\n\017AUTO_STEER_ONLY\020\002\022\023\n\017AUTO_SPEED_O"
  "NLY\020\003\022\022\n\016EMERGENCY_MODE\020\004\"\200\002\n\tErrorCode\022"
  "\014\n\010NO_ERROR\020\000\022\025\n\021CMD_NOT_IN_PERIOD\020\001\022\021\n\r"
  "CHASSIS_ERROR\020\002\022\032\n\026CHASSIS_ERROR_ON_STEE"
  "R\020\006\022\032\n\026CHASSIS_ERROR_ON_BRAKE\020\007\022\035\n\031CHASS"
  "IS_ERROR_ON_THROTTLE\020\010\022\031\n\025CHASSIS_ERROR_"
  "ON_GEAR\020\t\022\027\n\023MANUAL_INTERVENTION\020\003\022\035\n\031CH"
  "ASSIS_CAN_NOT_IN_PERIOD\020\004\022\021\n\rUNKNOWN_ERR"
  "OR\020\005\"\203\001\n\014GearPosition\022\020\n\014GEAR_NEUTRAL\020\000\022"
  "\016\n\nGEAR_DRIVE\020\001\022\020\n\014GEAR_REVERSE\020\002\022\020\n\014GEA"
  "R_PARKING\020\003\022\014\n\010GEAR_LOW\020\004\022\020\n\014GEAR_INVALI"
  "D\020\005\022\r\n\tGEAR_NONE\020\006\"\211\003\n\nChassisGPS\022\020\n\010lat"
  "itude\030\001 \001(\001\022\021\n\tlongitude\030\002 \001(\001\022\021\n\tgps_va"
  "lid\030\003 \001(\010\022\014\n\004year\030\004 \001(\005\022\r\n\005month\030\005 \001(\005\022\013"
  "\n\003day\030\006 \001(\005\022\r\n\005hours\030\007 \001(\005\022\017\n\007minutes\030\010 "
  "\001(\005\022\017\n\007seconds\030\t \001(\005\022\031\n\021compass_directio"
  "n\030\n \001(\001\022\014\n\004pdop\030\013 \001(\001\022\024\n\014is_gps_fault\030\014 "
  "\001(\010\022\023\n\013is_inferred\030\r \001(\010\022\020\n\010altitude\030\016 \001"
  "(\001\022\017\n\007heading\030\017 \001(\001\022\014\n\004hdop\030\020 \001(\001\022\014\n\004vdo"
  "p\030\021 \001(\001\022*\n\007quality\030\022 \001(\0162\031.apollo.canbus"
  ".GpsQuality\022\026\n\016num_satellites\030\023 \001(\005\022\021\n\tg"
  "ps_speed\030\024 \001(\001\"\032\n\007License\022\017\n\003vin\030\001 \001(\tB\002"
  "\030\001*A\n\nGpsQuality\022\n\n\006FIX_NO\020\000\022\n\n\006FIX_2D\020\001"
  "\022\n\n\006FIX_3D\020\002\022\017\n\013FIX_INVALID\020\003"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fcanbus_2fproto_2fchassis_2eproto_deps[4] = {
  &::descriptor_table_modules_2fcommon_2fproto_2fdrive_5fstate_2eproto,
  &::descriptor_table_modules_2fcommon_2fproto_2fgeometry_2eproto,
  &::descriptor_table_modules_2fcommon_2fproto_2fheader_2eproto,
  &::descriptor_table_modules_2fcommon_2fproto_2fvehicle_5fsignal_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fcanbus_2fproto_2fchassis_2eproto_sccs[3] = {
  &scc_info_Chassis_modules_2fcanbus_2fproto_2fchassis_2eproto.base,
  &scc_info_ChassisGPS_modules_2fcanbus_2fproto_2fchassis_2eproto.base,
  &scc_info_License_modules_2fcanbus_2fproto_2fchassis_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fcanbus_2fproto_2fchassis_2eproto_once;
static bool descriptor_table_modules_2fcanbus_2fproto_2fchassis_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fcanbus_2fproto_2fchassis_2eproto = {
  &descriptor_table_modules_2fcanbus_2fproto_2fchassis_2eproto_initialized, descriptor_table_protodef_modules_2fcanbus_2fproto_2fchassis_2eproto, "modules/canbus/proto/chassis.proto", 2109,
  &descriptor_table_modules_2fcanbus_2fproto_2fchassis_2eproto_once, descriptor_table_modules_2fcanbus_2fproto_2fchassis_2eproto_sccs, descriptor_table_modules_2fcanbus_2fproto_2fchassis_2eproto_deps, 3, 4,
  schemas, file_default_instances, TableStruct_modules_2fcanbus_2fproto_2fchassis_2eproto::offsets,
  file_level_metadata_modules_2fcanbus_2fproto_2fchassis_2eproto, 3, file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_2eproto, file_level_service_descriptors_modules_2fcanbus_2fproto_2fchassis_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fcanbus_2fproto_2fchassis_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_2eproto), true);
namespace apollo {
namespace canbus {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Chassis_DrivingMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_2eproto[0];
}
bool Chassis_DrivingMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Chassis_DrivingMode Chassis::COMPLETE_MANUAL;
constexpr Chassis_DrivingMode Chassis::COMPLETE_AUTO_DRIVE;
constexpr Chassis_DrivingMode Chassis::AUTO_STEER_ONLY;
constexpr Chassis_DrivingMode Chassis::AUTO_SPEED_ONLY;
constexpr Chassis_DrivingMode Chassis::EMERGENCY_MODE;
constexpr Chassis_DrivingMode Chassis::DrivingMode_MIN;
constexpr Chassis_DrivingMode Chassis::DrivingMode_MAX;
constexpr int Chassis::DrivingMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Chassis_ErrorCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_2eproto[1];
}
bool Chassis_ErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Chassis_ErrorCode Chassis::NO_ERROR;
constexpr Chassis_ErrorCode Chassis::CMD_NOT_IN_PERIOD;
constexpr Chassis_ErrorCode Chassis::CHASSIS_ERROR;
constexpr Chassis_ErrorCode Chassis::CHASSIS_ERROR_ON_STEER;
constexpr Chassis_ErrorCode Chassis::CHASSIS_ERROR_ON_BRAKE;
constexpr Chassis_ErrorCode Chassis::CHASSIS_ERROR_ON_THROTTLE;
constexpr Chassis_ErrorCode Chassis::CHASSIS_ERROR_ON_GEAR;
constexpr Chassis_ErrorCode Chassis::MANUAL_INTERVENTION;
constexpr Chassis_ErrorCode Chassis::CHASSIS_CAN_NOT_IN_PERIOD;
constexpr Chassis_ErrorCode Chassis::UNKNOWN_ERROR;
constexpr Chassis_ErrorCode Chassis::ErrorCode_MIN;
constexpr Chassis_ErrorCode Chassis::ErrorCode_MAX;
constexpr int Chassis::ErrorCode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Chassis_GearPosition_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_2eproto[2];
}
bool Chassis_GearPosition_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Chassis_GearPosition Chassis::GEAR_NEUTRAL;
constexpr Chassis_GearPosition Chassis::GEAR_DRIVE;
constexpr Chassis_GearPosition Chassis::GEAR_REVERSE;
constexpr Chassis_GearPosition Chassis::GEAR_PARKING;
constexpr Chassis_GearPosition Chassis::GEAR_LOW;
constexpr Chassis_GearPosition Chassis::GEAR_INVALID;
constexpr Chassis_GearPosition Chassis::GEAR_NONE;
constexpr Chassis_GearPosition Chassis::GearPosition_MIN;
constexpr Chassis_GearPosition Chassis::GearPosition_MAX;
constexpr int Chassis::GearPosition_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GpsQuality_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fcanbus_2fproto_2fchassis_2eproto);
  return file_level_enum_descriptors_modules_2fcanbus_2fproto_2fchassis_2eproto[3];
}
bool GpsQuality_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Chassis::InitAsDefaultInstance() {
  ::apollo::canbus::_Chassis_default_instance_._instance.get_mutable()->header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
  ::apollo::canbus::_Chassis_default_instance_._instance.get_mutable()->signal_ = const_cast< ::apollo::common::VehicleSignal*>(
      ::apollo::common::VehicleSignal::internal_default_instance());
  ::apollo::canbus::_Chassis_default_instance_._instance.get_mutable()->engage_advice_ = const_cast< ::apollo::common::EngageAdvice*>(
      ::apollo::common::EngageAdvice::internal_default_instance());
  ::apollo::canbus::_Chassis_default_instance_._instance.get_mutable()->license_ = const_cast< ::apollo::canbus::License*>(
      ::apollo::canbus::License::internal_default_instance());
}
class Chassis::_Internal {
 public:
  using HasBits = decltype(std::declval<Chassis>()._has_bits_);
  static void set_has_engine_started(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_engine_rpm(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_speed_mps(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_odometer_m(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_fuel_range_m(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_throttle_percentage(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_brake_percentage(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_steering_percentage(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_steering_torque_nm(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_parking_brake(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_high_beam_signal(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_low_beam_signal(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_left_turn_signal(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_right_turn_signal(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_horn(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_wiper(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_disengage_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_driving_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_error_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_gear_location(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_steering_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static const ::apollo::common::Header& header(const Chassis* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_chassis_error_mask(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static const ::apollo::common::VehicleSignal& signal(const Chassis* msg);
  static void set_has_signal(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::common::EngageAdvice& engage_advice(const Chassis* msg);
  static void set_has_engage_advice(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::canbus::License& license(const Chassis* msg);
  static void set_has_license(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::apollo::common::Header&
Chassis::_Internal::header(const Chassis* msg) {
  return *msg->header_;
}
const ::apollo::common::VehicleSignal&
Chassis::_Internal::signal(const Chassis* msg) {
  return *msg->signal_;
}
const ::apollo::common::EngageAdvice&
Chassis::_Internal::engage_advice(const Chassis* msg) {
  return *msg->engage_advice_;
}
const ::apollo::canbus::License&
Chassis::_Internal::license(const Chassis* msg) {
  return *msg->license_;
}
void Chassis::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void Chassis::clear_signal() {
  if (signal_ != nullptr) signal_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void Chassis::clear_engage_advice() {
  if (engage_advice_ != nullptr) engage_advice_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
Chassis::Chassis()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Chassis)
}
Chassis::Chassis(const Chassis& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from.has_signal()) {
    signal_ = new ::apollo::common::VehicleSignal(*from.signal_);
  } else {
    signal_ = nullptr;
  }
  if (from.has_engage_advice()) {
    engage_advice_ = new ::apollo::common::EngageAdvice(*from.engage_advice_);
  } else {
    engage_advice_ = nullptr;
  }
  if (from.has_license()) {
    license_ = new ::apollo::canbus::License(*from.license_);
  } else {
    license_ = nullptr;
  }
  ::memcpy(&engine_rpm_, &from.engine_rpm_,
    static_cast<size_t>(reinterpret_cast<char*>(&chassis_error_mask_) -
    reinterpret_cast<char*>(&engine_rpm_)) + sizeof(chassis_error_mask_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Chassis)
}

void Chassis::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Chassis_modules_2fcanbus_2fproto_2fchassis_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chassis_error_mask_) -
      reinterpret_cast<char*>(&header_)) + sizeof(chassis_error_mask_));
}

Chassis::~Chassis() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Chassis)
  SharedDtor();
}

void Chassis::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete signal_;
  if (this != internal_default_instance()) delete engage_advice_;
  if (this != internal_default_instance()) delete license_;
}

void Chassis::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Chassis& Chassis::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Chassis_modules_2fcanbus_2fproto_2fchassis_2eproto.base);
  return *internal_default_instance();
}


void Chassis::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Chassis)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(signal_ != nullptr);
      signal_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(engage_advice_ != nullptr);
      engage_advice_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(license_ != nullptr);
      license_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&engine_rpm_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fuel_range_m_) -
        reinterpret_cast<char*>(&engine_rpm_)) + sizeof(fuel_range_m_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&throttle_percentage_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steering_torque_nm_) -
        reinterpret_cast<char*>(&throttle_percentage_)) + sizeof(steering_torque_nm_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&left_turn_signal_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gear_location_) -
        reinterpret_cast<char*>(&left_turn_signal_)) + sizeof(gear_location_));
  }
  if (cached_has_bits & 0x03000000u) {
    ::memset(&steering_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chassis_error_mask_) -
        reinterpret_cast<char*>(&steering_timestamp_)) + sizeof(chassis_error_mask_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Chassis::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool engine_started = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_engine_started(&has_bits);
          engine_started_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float engine_rpm = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_engine_rpm(&has_bits);
          engine_rpm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float speed_mps = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_speed_mps(&has_bits);
          speed_mps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float odometer_m = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_odometer_m(&has_bits);
          odometer_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 fuel_range_m = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_fuel_range_m(&has_bits);
          fuel_range_m_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float throttle_percentage = 8 [default = 0];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_throttle_percentage(&has_bits);
          throttle_percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float brake_percentage = 9 [default = 0];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_brake_percentage(&has_bits);
          brake_percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float steering_percentage = 11 [default = 0];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_steering_percentage(&has_bits);
          steering_percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float steering_torque_nm = 12 [default = 0];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_steering_torque_nm(&has_bits);
          steering_torque_nm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool parking_brake = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_parking_brake(&has_bits);
          parking_brake_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool high_beam_signal = 14 [deprecated = true];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_high_beam_signal(&has_bits);
          high_beam_signal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool low_beam_signal = 15 [deprecated = true];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_low_beam_signal(&has_bits);
          low_beam_signal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool left_turn_signal = 16 [deprecated = true];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_left_turn_signal(&has_bits);
          left_turn_signal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool right_turn_signal = 17 [deprecated = true];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_right_turn_signal(&has_bits);
          right_turn_signal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool horn = 18 [deprecated = true];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_horn(&has_bits);
          horn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool wiper = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_wiper(&has_bits);
          wiper_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool disengage_status = 20 [deprecated = true];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_disengage_status(&has_bits);
          disengage_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Chassis.DrivingMode driving_mode = 21 [default = COMPLETE_MANUAL];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Chassis_DrivingMode_IsValid(val))) {
            set_driving_mode(static_cast<::apollo::canbus::Chassis_DrivingMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(21, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Chassis.ErrorCode error_code = 22 [default = NO_ERROR];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Chassis_ErrorCode_IsValid(val))) {
            set_error_code(static_cast<::apollo::canbus::Chassis_ErrorCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(22, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.Chassis.GearPosition gear_location = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Chassis_GearPosition_IsValid(val))) {
            set_gear_location(static_cast<::apollo::canbus::Chassis_GearPosition>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(23, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double steering_timestamp = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 193)) {
          _Internal::set_has_steering_timestamp(&has_bits);
          steering_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.common.Header header = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 chassis_error_mask = 26 [default = 0];
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_chassis_error_mask(&has_bits);
          chassis_error_mask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.common.VehicleSignal signal = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(mutable_signal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.common.EngageAdvice engage_advice = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(mutable_engage_advice(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.License license = 32 [deprecated = true];
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(mutable_license(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Chassis::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Chassis)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool engine_started = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_engine_started(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &engine_started_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float engine_rpm = 4 [default = 0];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          _Internal::set_has_engine_rpm(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &engine_rpm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float speed_mps = 5 [default = 0];
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {
          _Internal::set_has_speed_mps(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_mps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float odometer_m = 6 [default = 0];
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {
          _Internal::set_has_odometer_m(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &odometer_m_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 fuel_range_m = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_fuel_range_m(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &fuel_range_m_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float throttle_percentage = 8 [default = 0];
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (69 & 0xFF)) {
          _Internal::set_has_throttle_percentage(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &throttle_percentage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float brake_percentage = 9 [default = 0];
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (77 & 0xFF)) {
          _Internal::set_has_brake_percentage(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &brake_percentage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float steering_percentage = 11 [default = 0];
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (93 & 0xFF)) {
          _Internal::set_has_steering_percentage(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &steering_percentage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float steering_torque_nm = 12 [default = 0];
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (101 & 0xFF)) {
          _Internal::set_has_steering_torque_nm(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &steering_torque_nm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool parking_brake = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {
          _Internal::set_has_parking_brake(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &parking_brake_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool high_beam_signal = 14 [deprecated = true];
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {
          _Internal::set_has_high_beam_signal(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &high_beam_signal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool low_beam_signal = 15 [deprecated = true];
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {
          _Internal::set_has_low_beam_signal(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &low_beam_signal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool left_turn_signal = 16 [deprecated = true];
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (128 & 0xFF)) {
          _Internal::set_has_left_turn_signal(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &left_turn_signal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool right_turn_signal = 17 [deprecated = true];
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (136 & 0xFF)) {
          _Internal::set_has_right_turn_signal(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &right_turn_signal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool horn = 18 [deprecated = true];
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (144 & 0xFF)) {
          _Internal::set_has_horn(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &horn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool wiper = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (152 & 0xFF)) {
          _Internal::set_has_wiper(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wiper_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool disengage_status = 20 [deprecated = true];
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (160 & 0xFF)) {
          _Internal::set_has_disengage_status(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disengage_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Chassis.DrivingMode driving_mode = 21 [default = COMPLETE_MANUAL];
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (168 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::Chassis_DrivingMode_IsValid(value)) {
            set_driving_mode(static_cast< ::apollo::canbus::Chassis_DrivingMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                21, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Chassis.ErrorCode error_code = 22 [default = NO_ERROR];
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (176 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::Chassis_ErrorCode_IsValid(value)) {
            set_error_code(static_cast< ::apollo::canbus::Chassis_ErrorCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                22, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Chassis.GearPosition gear_location = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (184 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::Chassis_GearPosition_IsValid(value)) {
            set_gear_location(static_cast< ::apollo::canbus::Chassis_GearPosition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                23, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double steering_timestamp = 24;
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (193 & 0xFF)) {
          _Internal::set_has_steering_timestamp(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steering_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.Header header = 25;
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (202 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 chassis_error_mask = 26 [default = 0];
      case 26: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (208 & 0xFF)) {
          _Internal::set_has_chassis_error_mask(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &chassis_error_mask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.VehicleSignal signal = 27;
      case 27: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (218 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_signal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.EngageAdvice engage_advice = 29;
      case 29: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (234 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_engage_advice()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.License license = 32 [deprecated = true];
      case 32: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (258 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_license()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Chassis)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Chassis)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Chassis::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Chassis)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool engine_started = 3;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->engine_started(), output);
  }

  // optional float engine_rpm = 4 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->engine_rpm(), output);
  }

  // optional float speed_mps = 5 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->speed_mps(), output);
  }

  // optional float odometer_m = 6 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(6, this->odometer_m(), output);
  }

  // optional int32 fuel_range_m = 7;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->fuel_range_m(), output);
  }

  // optional float throttle_percentage = 8 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(8, this->throttle_percentage(), output);
  }

  // optional float brake_percentage = 9 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(9, this->brake_percentage(), output);
  }

  // optional float steering_percentage = 11 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(11, this->steering_percentage(), output);
  }

  // optional float steering_torque_nm = 12 [default = 0];
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(12, this->steering_torque_nm(), output);
  }

  // optional bool parking_brake = 13;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(13, this->parking_brake(), output);
  }

  // optional bool high_beam_signal = 14 [deprecated = true];
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(14, this->high_beam_signal(), output);
  }

  // optional bool low_beam_signal = 15 [deprecated = true];
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(15, this->low_beam_signal(), output);
  }

  // optional bool left_turn_signal = 16 [deprecated = true];
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(16, this->left_turn_signal(), output);
  }

  // optional bool right_turn_signal = 17 [deprecated = true];
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(17, this->right_turn_signal(), output);
  }

  // optional bool horn = 18 [deprecated = true];
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(18, this->horn(), output);
  }

  // optional bool wiper = 19;
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(19, this->wiper(), output);
  }

  // optional bool disengage_status = 20 [deprecated = true];
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(20, this->disengage_status(), output);
  }

  // optional .apollo.canbus.Chassis.DrivingMode driving_mode = 21 [default = COMPLETE_MANUAL];
  if (cached_has_bits & 0x00200000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      21, this->driving_mode(), output);
  }

  // optional .apollo.canbus.Chassis.ErrorCode error_code = 22 [default = NO_ERROR];
  if (cached_has_bits & 0x00400000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      22, this->error_code(), output);
  }

  // optional .apollo.canbus.Chassis.GearPosition gear_location = 23;
  if (cached_has_bits & 0x00800000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      23, this->gear_location(), output);
  }

  // optional double steering_timestamp = 24;
  if (cached_has_bits & 0x01000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(24, this->steering_timestamp(), output);
  }

  // optional .apollo.common.Header header = 25;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, _Internal::header(this), output);
  }

  // optional int32 chassis_error_mask = 26 [default = 0];
  if (cached_has_bits & 0x02000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(26, this->chassis_error_mask(), output);
  }

  // optional .apollo.common.VehicleSignal signal = 27;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, _Internal::signal(this), output);
  }

  // optional .apollo.common.EngageAdvice engage_advice = 29;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, _Internal::engage_advice(this), output);
  }

  // optional .apollo.canbus.License license = 32 [deprecated = true];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, _Internal::license(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.Chassis)
}

::PROTOBUF_NAMESPACE_ID::uint8* Chassis::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Chassis)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool engine_started = 3;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->engine_started(), target);
  }

  // optional float engine_rpm = 4 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->engine_rpm(), target);
  }

  // optional float speed_mps = 5 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->speed_mps(), target);
  }

  // optional float odometer_m = 6 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->odometer_m(), target);
  }

  // optional int32 fuel_range_m = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->fuel_range_m(), target);
  }

  // optional float throttle_percentage = 8 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->throttle_percentage(), target);
  }

  // optional float brake_percentage = 9 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->brake_percentage(), target);
  }

  // optional float steering_percentage = 11 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->steering_percentage(), target);
  }

  // optional float steering_torque_nm = 12 [default = 0];
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->steering_torque_nm(), target);
  }

  // optional bool parking_brake = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->parking_brake(), target);
  }

  // optional bool high_beam_signal = 14 [deprecated = true];
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->high_beam_signal(), target);
  }

  // optional bool low_beam_signal = 15 [deprecated = true];
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->low_beam_signal(), target);
  }

  // optional bool left_turn_signal = 16 [deprecated = true];
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->left_turn_signal(), target);
  }

  // optional bool right_turn_signal = 17 [deprecated = true];
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->right_turn_signal(), target);
  }

  // optional bool horn = 18 [deprecated = true];
  if (cached_has_bits & 0x00040000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->horn(), target);
  }

  // optional bool wiper = 19;
  if (cached_has_bits & 0x00080000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->wiper(), target);
  }

  // optional bool disengage_status = 20 [deprecated = true];
  if (cached_has_bits & 0x00100000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->disengage_status(), target);
  }

  // optional .apollo.canbus.Chassis.DrivingMode driving_mode = 21 [default = COMPLETE_MANUAL];
  if (cached_has_bits & 0x00200000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      21, this->driving_mode(), target);
  }

  // optional .apollo.canbus.Chassis.ErrorCode error_code = 22 [default = NO_ERROR];
  if (cached_has_bits & 0x00400000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      22, this->error_code(), target);
  }

  // optional .apollo.canbus.Chassis.GearPosition gear_location = 23;
  if (cached_has_bits & 0x00800000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      23, this->gear_location(), target);
  }

  // optional double steering_timestamp = 24;
  if (cached_has_bits & 0x01000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(24, this->steering_timestamp(), target);
  }

  // optional .apollo.common.Header header = 25;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        25, _Internal::header(this), target);
  }

  // optional int32 chassis_error_mask = 26 [default = 0];
  if (cached_has_bits & 0x02000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(26, this->chassis_error_mask(), target);
  }

  // optional .apollo.common.VehicleSignal signal = 27;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        27, _Internal::signal(this), target);
  }

  // optional .apollo.common.EngageAdvice engage_advice = 29;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        29, _Internal::engage_advice(this), target);
  }

  // optional .apollo.canbus.License license = 32 [deprecated = true];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        32, _Internal::license(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Chassis)
  return target;
}

size_t Chassis::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Chassis)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.common.Header header = 25;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .apollo.common.VehicleSignal signal = 27;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *signal_);
    }

    // optional .apollo.common.EngageAdvice engage_advice = 29;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *engage_advice_);
    }

    // optional .apollo.canbus.License license = 32 [deprecated = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *license_);
    }

    // optional float engine_rpm = 4 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float speed_mps = 5 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float odometer_m = 6 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional int32 fuel_range_m = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->fuel_range_m());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float throttle_percentage = 8 [default = 0];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional float brake_percentage = 9 [default = 0];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional float steering_percentage = 11 [default = 0];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional bool engine_started = 3;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool parking_brake = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool high_beam_signal = 14 [deprecated = true];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool low_beam_signal = 15 [deprecated = true];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional float steering_torque_nm = 12 [default = 0];
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool left_turn_signal = 16 [deprecated = true];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool right_turn_signal = 17 [deprecated = true];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional bool horn = 18 [deprecated = true];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional bool wiper = 19;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // optional bool disengage_status = 20 [deprecated = true];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

    // optional .apollo.canbus.Chassis.DrivingMode driving_mode = 21 [default = COMPLETE_MANUAL];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->driving_mode());
    }

    // optional .apollo.canbus.Chassis.ErrorCode error_code = 22 [default = NO_ERROR];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->error_code());
    }

    // optional .apollo.canbus.Chassis.GearPosition gear_location = 23;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->gear_location());
    }

  }
  if (cached_has_bits & 0x03000000u) {
    // optional double steering_timestamp = 24;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 8;
    }

    // optional int32 chassis_error_mask = 26 [default = 0];
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->chassis_error_mask());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Chassis::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Chassis)
  GOOGLE_DCHECK_NE(&from, this);
  const Chassis* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Chassis>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Chassis)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Chassis)
    MergeFrom(*source);
  }
}

void Chassis::MergeFrom(const Chassis& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Chassis)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::apollo::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_signal()->::apollo::common::VehicleSignal::MergeFrom(from.signal());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_engage_advice()->::apollo::common::EngageAdvice::MergeFrom(from.engage_advice());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_license()->::apollo::canbus::License::MergeFrom(from.license());
    }
    if (cached_has_bits & 0x00000010u) {
      engine_rpm_ = from.engine_rpm_;
    }
    if (cached_has_bits & 0x00000020u) {
      speed_mps_ = from.speed_mps_;
    }
    if (cached_has_bits & 0x00000040u) {
      odometer_m_ = from.odometer_m_;
    }
    if (cached_has_bits & 0x00000080u) {
      fuel_range_m_ = from.fuel_range_m_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      throttle_percentage_ = from.throttle_percentage_;
    }
    if (cached_has_bits & 0x00000200u) {
      brake_percentage_ = from.brake_percentage_;
    }
    if (cached_has_bits & 0x00000400u) {
      steering_percentage_ = from.steering_percentage_;
    }
    if (cached_has_bits & 0x00000800u) {
      engine_started_ = from.engine_started_;
    }
    if (cached_has_bits & 0x00001000u) {
      parking_brake_ = from.parking_brake_;
    }
    if (cached_has_bits & 0x00002000u) {
      high_beam_signal_ = from.high_beam_signal_;
    }
    if (cached_has_bits & 0x00004000u) {
      low_beam_signal_ = from.low_beam_signal_;
    }
    if (cached_has_bits & 0x00008000u) {
      steering_torque_nm_ = from.steering_torque_nm_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      left_turn_signal_ = from.left_turn_signal_;
    }
    if (cached_has_bits & 0x00020000u) {
      right_turn_signal_ = from.right_turn_signal_;
    }
    if (cached_has_bits & 0x00040000u) {
      horn_ = from.horn_;
    }
    if (cached_has_bits & 0x00080000u) {
      wiper_ = from.wiper_;
    }
    if (cached_has_bits & 0x00100000u) {
      disengage_status_ = from.disengage_status_;
    }
    if (cached_has_bits & 0x00200000u) {
      driving_mode_ = from.driving_mode_;
    }
    if (cached_has_bits & 0x00400000u) {
      error_code_ = from.error_code_;
    }
    if (cached_has_bits & 0x00800000u) {
      gear_location_ = from.gear_location_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x03000000u) {
    if (cached_has_bits & 0x01000000u) {
      steering_timestamp_ = from.steering_timestamp_;
    }
    if (cached_has_bits & 0x02000000u) {
      chassis_error_mask_ = from.chassis_error_mask_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Chassis::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Chassis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Chassis::CopyFrom(const Chassis& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Chassis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chassis::IsInitialized() const {
  return true;
}

void Chassis::InternalSwap(Chassis* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(header_, other->header_);
  swap(signal_, other->signal_);
  swap(engage_advice_, other->engage_advice_);
  swap(license_, other->license_);
  swap(engine_rpm_, other->engine_rpm_);
  swap(speed_mps_, other->speed_mps_);
  swap(odometer_m_, other->odometer_m_);
  swap(fuel_range_m_, other->fuel_range_m_);
  swap(throttle_percentage_, other->throttle_percentage_);
  swap(brake_percentage_, other->brake_percentage_);
  swap(steering_percentage_, other->steering_percentage_);
  swap(engine_started_, other->engine_started_);
  swap(parking_brake_, other->parking_brake_);
  swap(high_beam_signal_, other->high_beam_signal_);
  swap(low_beam_signal_, other->low_beam_signal_);
  swap(steering_torque_nm_, other->steering_torque_nm_);
  swap(left_turn_signal_, other->left_turn_signal_);
  swap(right_turn_signal_, other->right_turn_signal_);
  swap(horn_, other->horn_);
  swap(wiper_, other->wiper_);
  swap(disengage_status_, other->disengage_status_);
  swap(driving_mode_, other->driving_mode_);
  swap(error_code_, other->error_code_);
  swap(gear_location_, other->gear_location_);
  swap(steering_timestamp_, other->steering_timestamp_);
  swap(chassis_error_mask_, other->chassis_error_mask_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Chassis::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChassisGPS::InitAsDefaultInstance() {
}
class ChassisGPS::_Internal {
 public:
  using HasBits = decltype(std::declval<ChassisGPS>()._has_bits_);
  static void set_has_latitude(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_longitude(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_gps_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_year(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_month(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_day(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_hours(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_minutes(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_compass_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_pdop(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_is_gps_fault(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_is_inferred(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_altitude(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_hdop(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_vdop(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_quality(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_num_satellites(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_gps_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
};

ChassisGPS::ChassisGPS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.ChassisGPS)
}
ChassisGPS::ChassisGPS(const ChassisGPS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&latitude_, &from.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_satellites_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(num_satellites_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.ChassisGPS)
}

void ChassisGPS::SharedCtor() {
  ::memset(&latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_satellites_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(num_satellites_));
}

ChassisGPS::~ChassisGPS() {
  // @@protoc_insertion_point(destructor:apollo.canbus.ChassisGPS)
  SharedDtor();
}

void ChassisGPS::SharedDtor() {
}

void ChassisGPS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChassisGPS& ChassisGPS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChassisGPS_modules_2fcanbus_2fproto_2fchassis_2eproto.base);
  return *internal_default_instance();
}


void ChassisGPS::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.ChassisGPS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&latitude_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seconds_) -
        reinterpret_cast<char*>(&latitude_)) + sizeof(seconds_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&compass_direction_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&heading_) -
        reinterpret_cast<char*>(&compass_direction_)) + sizeof(heading_));
  }
  if (cached_has_bits & 0x000f0000u) {
    ::memset(&hdop_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_satellites_) -
        reinterpret_cast<char*>(&hdop_)) + sizeof(num_satellites_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ChassisGPS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double latitude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_latitude(&has_bits);
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double longitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_longitude(&has_bits);
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool gps_valid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_gps_valid(&has_bits);
          gps_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 year = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_year(&has_bits);
          year_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 month = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_month(&has_bits);
          month_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 day = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_day(&has_bits);
          day_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 hours = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_hours(&has_bits);
          hours_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 minutes = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_minutes(&has_bits);
          minutes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 seconds = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_seconds(&has_bits);
          seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double compass_direction = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_compass_direction(&has_bits);
          compass_direction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double pdop = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_pdop(&has_bits);
          pdop_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool is_gps_fault = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_is_gps_fault(&has_bits);
          is_gps_fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_inferred = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_is_inferred(&has_bits);
          is_inferred_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double altitude = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          _Internal::set_has_altitude(&has_bits);
          altitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double heading = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          _Internal::set_has_heading(&has_bits);
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double hdop = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          _Internal::set_has_hdop(&has_bits);
          hdop_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double vdop = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          _Internal::set_has_vdop(&has_bits);
          vdop_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.canbus.GpsQuality quality = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::GpsQuality_IsValid(val))) {
            set_quality(static_cast<::apollo::canbus::GpsQuality>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(18, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 num_satellites = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_num_satellites(&has_bits);
          num_satellites_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double gps_speed = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 161)) {
          _Internal::set_has_gps_speed(&has_bits);
          gps_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ChassisGPS::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.ChassisGPS)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double latitude = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {
          _Internal::set_has_latitude(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double longitude = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {
          _Internal::set_has_longitude(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool gps_valid = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_gps_valid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gps_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 year = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_year(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &year_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 month = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_month(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &month_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 day = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_day(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 hours = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_hours(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &hours_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 minutes = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_minutes(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &minutes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 seconds = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_seconds(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double compass_direction = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (81 & 0xFF)) {
          _Internal::set_has_compass_direction(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &compass_direction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double pdop = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (89 & 0xFF)) {
          _Internal::set_has_pdop(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pdop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_gps_fault = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          _Internal::set_has_is_gps_fault(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_gps_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_inferred = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {
          _Internal::set_has_is_inferred(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_inferred_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double altitude = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (113 & 0xFF)) {
          _Internal::set_has_altitude(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &altitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double heading = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (121 & 0xFF)) {
          _Internal::set_has_heading(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double hdop = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (129 & 0xFF)) {
          _Internal::set_has_hdop(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &hdop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double vdop = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (137 & 0xFF)) {
          _Internal::set_has_vdop(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vdop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.GpsQuality quality = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (144 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::GpsQuality_IsValid(value)) {
            set_quality(static_cast< ::apollo::canbus::GpsQuality >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                18, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_satellites = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (152 & 0xFF)) {
          _Internal::set_has_num_satellites(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_satellites_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double gps_speed = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (161 & 0xFF)) {
          _Internal::set_has_gps_speed(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gps_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.ChassisGPS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.ChassisGPS)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ChassisGPS::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.ChassisGPS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double latitude = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->latitude(), output);
  }

  // optional double longitude = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->longitude(), output);
  }

  // optional bool gps_valid = 3;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->gps_valid(), output);
  }

  // optional int32 year = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->year(), output);
  }

  // optional int32 month = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->month(), output);
  }

  // optional int32 day = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->day(), output);
  }

  // optional int32 hours = 7;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->hours(), output);
  }

  // optional int32 minutes = 8;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(8, this->minutes(), output);
  }

  // optional int32 seconds = 9;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(9, this->seconds(), output);
  }

  // optional double compass_direction = 10;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(10, this->compass_direction(), output);
  }

  // optional double pdop = 11;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(11, this->pdop(), output);
  }

  // optional bool is_gps_fault = 12;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(12, this->is_gps_fault(), output);
  }

  // optional bool is_inferred = 13;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(13, this->is_inferred(), output);
  }

  // optional double altitude = 14;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(14, this->altitude(), output);
  }

  // optional double heading = 15;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(15, this->heading(), output);
  }

  // optional double hdop = 16;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(16, this->hdop(), output);
  }

  // optional double vdop = 17;
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(17, this->vdop(), output);
  }

  // optional .apollo.canbus.GpsQuality quality = 18;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      18, this->quality(), output);
  }

  // optional int32 num_satellites = 19;
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(19, this->num_satellites(), output);
  }

  // optional double gps_speed = 20;
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(20, this->gps_speed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.ChassisGPS)
}

::PROTOBUF_NAMESPACE_ID::uint8* ChassisGPS::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.ChassisGPS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double latitude = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->latitude(), target);
  }

  // optional double longitude = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->longitude(), target);
  }

  // optional bool gps_valid = 3;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->gps_valid(), target);
  }

  // optional int32 year = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->year(), target);
  }

  // optional int32 month = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->month(), target);
  }

  // optional int32 day = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->day(), target);
  }

  // optional int32 hours = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->hours(), target);
  }

  // optional int32 minutes = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->minutes(), target);
  }

  // optional int32 seconds = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->seconds(), target);
  }

  // optional double compass_direction = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->compass_direction(), target);
  }

  // optional double pdop = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->pdop(), target);
  }

  // optional bool is_gps_fault = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->is_gps_fault(), target);
  }

  // optional bool is_inferred = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->is_inferred(), target);
  }

  // optional double altitude = 14;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->altitude(), target);
  }

  // optional double heading = 15;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->heading(), target);
  }

  // optional double hdop = 16;
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->hdop(), target);
  }

  // optional double vdop = 17;
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->vdop(), target);
  }

  // optional .apollo.canbus.GpsQuality quality = 18;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      18, this->quality(), target);
  }

  // optional int32 num_satellites = 19;
  if (cached_has_bits & 0x00080000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->num_satellites(), target);
  }

  // optional double gps_speed = 20;
  if (cached_has_bits & 0x00040000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(20, this->gps_speed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.ChassisGPS)
  return target;
}

size_t ChassisGPS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.ChassisGPS)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double latitude = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double longitude = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional int32 year = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->year());
    }

    // optional int32 month = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->month());
    }

    // optional int32 day = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->day());
    }

    // optional int32 hours = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->hours());
    }

    // optional int32 minutes = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->minutes());
    }

    // optional int32 seconds = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->seconds());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double compass_direction = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double pdop = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional bool gps_valid = 3;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool is_gps_fault = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool is_inferred = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional .apollo.canbus.GpsQuality quality = 18;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->quality());
    }

    // optional double altitude = 14;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 8;
    }

    // optional double heading = 15;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x000f0000u) {
    // optional double hdop = 16;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 8;
    }

    // optional double vdop = 17;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 8;
    }

    // optional double gps_speed = 20;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 8;
    }

    // optional int32 num_satellites = 19;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_satellites());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChassisGPS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.ChassisGPS)
  GOOGLE_DCHECK_NE(&from, this);
  const ChassisGPS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChassisGPS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.ChassisGPS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.ChassisGPS)
    MergeFrom(*source);
  }
}

void ChassisGPS::MergeFrom(const ChassisGPS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.ChassisGPS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00000002u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00000004u) {
      year_ = from.year_;
    }
    if (cached_has_bits & 0x00000008u) {
      month_ = from.month_;
    }
    if (cached_has_bits & 0x00000010u) {
      day_ = from.day_;
    }
    if (cached_has_bits & 0x00000020u) {
      hours_ = from.hours_;
    }
    if (cached_has_bits & 0x00000040u) {
      minutes_ = from.minutes_;
    }
    if (cached_has_bits & 0x00000080u) {
      seconds_ = from.seconds_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      compass_direction_ = from.compass_direction_;
    }
    if (cached_has_bits & 0x00000200u) {
      pdop_ = from.pdop_;
    }
    if (cached_has_bits & 0x00000400u) {
      gps_valid_ = from.gps_valid_;
    }
    if (cached_has_bits & 0x00000800u) {
      is_gps_fault_ = from.is_gps_fault_;
    }
    if (cached_has_bits & 0x00001000u) {
      is_inferred_ = from.is_inferred_;
    }
    if (cached_has_bits & 0x00002000u) {
      quality_ = from.quality_;
    }
    if (cached_has_bits & 0x00004000u) {
      altitude_ = from.altitude_;
    }
    if (cached_has_bits & 0x00008000u) {
      heading_ = from.heading_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      hdop_ = from.hdop_;
    }
    if (cached_has_bits & 0x00020000u) {
      vdop_ = from.vdop_;
    }
    if (cached_has_bits & 0x00040000u) {
      gps_speed_ = from.gps_speed_;
    }
    if (cached_has_bits & 0x00080000u) {
      num_satellites_ = from.num_satellites_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChassisGPS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.ChassisGPS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChassisGPS::CopyFrom(const ChassisGPS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.ChassisGPS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChassisGPS::IsInitialized() const {
  return true;
}

void ChassisGPS::InternalSwap(ChassisGPS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(latitude_, other->latitude_);
  swap(longitude_, other->longitude_);
  swap(year_, other->year_);
  swap(month_, other->month_);
  swap(day_, other->day_);
  swap(hours_, other->hours_);
  swap(minutes_, other->minutes_);
  swap(seconds_, other->seconds_);
  swap(compass_direction_, other->compass_direction_);
  swap(pdop_, other->pdop_);
  swap(gps_valid_, other->gps_valid_);
  swap(is_gps_fault_, other->is_gps_fault_);
  swap(is_inferred_, other->is_inferred_);
  swap(quality_, other->quality_);
  swap(altitude_, other->altitude_);
  swap(heading_, other->heading_);
  swap(hdop_, other->hdop_);
  swap(vdop_, other->vdop_);
  swap(gps_speed_, other->gps_speed_);
  swap(num_satellites_, other->num_satellites_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChassisGPS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void License::InitAsDefaultInstance() {
}
class License::_Internal {
 public:
  using HasBits = decltype(std::declval<License>()._has_bits_);
  static void set_has_vin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

License::License()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.License)
}
License::License(const License& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_vin()) {
    vin_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.vin_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.License)
}

void License::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_License_modules_2fcanbus_2fproto_2fchassis_2eproto.base);
  vin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

License::~License() {
  // @@protoc_insertion_point(destructor:apollo.canbus.License)
  SharedDtor();
}

void License::SharedDtor() {
  vin_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void License::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const License& License::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_License_modules_2fcanbus_2fproto_2fchassis_2eproto.base);
  return *internal_default_instance();
}


void License::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.License)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    vin_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* License::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string vin = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_vin(), ptr, ctx, "apollo.canbus.License.vin");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool License::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.License)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string vin = 1 [deprecated = true];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_vin()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vin().data(), static_cast<int>(this->vin().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "apollo.canbus.License.vin");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.License)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.License)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void License::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.License)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string vin = 1 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vin().data(), static_cast<int>(this->vin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.canbus.License.vin");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->vin(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.License)
}

::PROTOBUF_NAMESPACE_ID::uint8* License::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.License)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string vin = 1 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vin().data(), static_cast<int>(this->vin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.canbus.License.vin");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->vin(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.License)
  return target;
}

size_t License::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.License)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string vin = 1 [deprecated = true];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->vin());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void License::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.License)
  GOOGLE_DCHECK_NE(&from, this);
  const License* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<License>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.License)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.License)
    MergeFrom(*source);
  }
}

void License::MergeFrom(const License& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.License)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_vin()) {
    _has_bits_[0] |= 0x00000001u;
    vin_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.vin_);
  }
}

void License::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.License)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void License::CopyFrom(const License& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.License)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool License::IsInitialized() const {
  return true;
}

void License::InternalSwap(License* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  vin_.Swap(&other->vin_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata License::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace canbus
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::canbus::Chassis* Arena::CreateMaybeMessage< ::apollo::canbus::Chassis >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Chassis >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::ChassisGPS* Arena::CreateMaybeMessage< ::apollo::canbus::ChassisGPS >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::ChassisGPS >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::canbus::License* Arena::CreateMaybeMessage< ::apollo::canbus::License >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::License >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
